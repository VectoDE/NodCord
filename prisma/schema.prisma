// Prisma Schema for NodCord
// Generated to mirror the Mongoose models with production-grade defaults and constraints

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BugSeverity {
  LOW    @map("Low")
  MEDIUM @map("Medium")
  HIGH   @map("High")
}

enum BugStatus {
  OPEN        @map("Open")
  IN_PROGRESS @map("In Progress")
  RESOLVED    @map("Resolved")
  CLOSED      @map("Closed")
}

enum ChatType {
  MEMBER_TO_MEMBER       @map("member_to_member")
  MEMBER_TO_ORGANIZATION @map("member_to_organization")
  MEMBER_TO_GROUP        @map("member_to_group")
}

enum CustomerOrderStatus {
  PENDING   @map("Pending")
  SHIPPED   @map("Shipped")
  DELIVERED @map("Delivered")
  CANCELLED @map("Cancelled")
}

enum FavoriteType {
  PROJECT @map("project")
  PRODUCT @map("product")
  TASK    @map("task")
  COMPANY @map("company")
}

enum FeatureStatus {
  PLANNED     @map("Planned")
  IN_PROGRESS @map("In Progress")
  COMPLETED   @map("Completed")
}

enum LogLevel {
  INFO  @map("info")
  WARN  @map("warn")
  ERROR @map("error")
}

enum OrderStatus {
  PENDING   @map("Pending")
  SHIPPED   @map("Shipped")
  DELIVERED @map("Delivered")
}

enum PaymentMethod {
  CREDIT_CARD   @map("credit_card")
  APPLE_PAY     @map("apple_pay")
  GOOGLE_PAY    @map("google_pay")
  AMAZON_PAY    @map("amazon_pay")
  STRIPE        @map("stripe")
  PAYPAL        @map("paypal")
  BANK_TRANSFER @map("bank_transfer")
}

enum PaymentStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")
  FAILED    @map("failed")
}

enum PriorityLevel {
  LOW    @map("Low")
  MEDIUM @map("Medium")
  HIGH   @map("High")
}

enum ProjectStatus {
  NOT_STARTED @map("Not Started")
  IN_PROGRESS @map("In Progress")
  COMPLETED   @map("Completed")
  ON_HOLD     @map("On Hold")
}

enum ReturnStatus {
  REQUESTED @map("Requested")
  APPROVED  @map("Approved")
  REJECTED  @map("Rejected")
  COMPLETED @map("Completed")
}

enum SharePlatform {
  FACEBOOK @map("Facebook")
  TWITTER  @map("Twitter")
  LINKEDIN @map("LinkedIn")
  OTHER    @map("Other")
}

enum StoryStatus {
  BACKLOG     @map("Backlog")
  IN_PROGRESS @map("In Progress")
  COMPLETED   @map("Completed")
}

enum TaskCategory {
  DEVELOPMENT @map("development")
  MARKETING   @map("marketing")
  DESIGN      @map("design")
  MANAGEMENT  @map("management")
  OTHER       @map("other")
}

enum TaskStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in-progress")
  COMPLETED   @map("completed")
  ON_HOLD     @map("on-hold")
}

enum TeamStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum TeamType {
  PROJECT    @map("project")
  DEPARTMENT @map("department")
  ESPORTS    @map("esports")
  OTHER      @map("other")
}

enum TicketStatus {
  OPEN   @map("open")
  CLOSED @map("closed")
}

enum UserRole {
  USER      @map("user")
  ADMIN     @map("admin")
  MODERATOR @map("moderator")
}

enum TenantStatus {
  ONBOARDING @map("onboarding")
  ACTIVE     @map("active")
  SUSPENDED  @map("suspended")
  CANCELLED  @map("cancelled")
}

enum AuditAction {
  CREATED             @map("created")
  UPDATED             @map("updated")
  DELETED             @map("deleted")
  ACCESSED            @map("accessed")
  LOGIN               @map("login")
  LOGOUT              @map("logout")
  PERMISSION_CHANGED  @map("permission_changed")
  SECURITY_EVENT      @map("security_event")
  SYSTEM_CONFIGURATION @map("system_configuration")
}

enum EnvironmentType {
  PRODUCTION  @map("production")
  STAGING     @map("staging")
  DEVELOPMENT @map("development")
  TEST        @map("test")
}

model Tenant {
  id                String   @id @default(uuid())
  slug              String   @unique
  name              String
  status            TenantStatus @default(ONBOARDING)
  plan              String   @default("free")
  metadata          Json     @default("{}")
  timezone          String   @default("UTC")
  billingEmail      String?
  technicalContact  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  apiKeys        ApiKey[]
  apiSystems     ApiSystem[]
  auditLogs      AuditLog[]
  betaSystems    BetaSystem[]
  blogs          Blog[]
  companies      Company[]
  customerOrders CustomerOrder[]
  customers      Customer[]
  dataRetentionPolicies DataRetentionPolicy[]
  feedback       Feedback[]
  orders         Order[]
  organizations  Organization[]
  payments       Payment[]
  products       Product[]
  projects       Project[]
  systemSettings SystemSetting[]
  tasks          Task[]
  teams          Team[]
  tickets        Ticket[]
  users          User[]
  versions       Version[]
  versionTags    VersionTag[]

  @@index([status], map: "idx_tenant_status")
  @@index([createdAt], map: "idx_tenant_created_at")
  @@map("Tenant")
}

model AuditLog {
  id         String      @id @default(uuid())
  tenantId   String
  actorId    String?
  entityName String
  entityId   String
  action     AuditAction
  changes    Json        @default("{}")
  ipAddress  String?
  userAgent  String?
  context    Json        @default("{}")
  createdAt  DateTime    @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actor  User?  @relation("UserAuditLogs", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([tenantId, entityName, entityId], map: "idx_audit_entity")
  @@index([createdAt], map: "idx_audit_created_at")
  @@map("AuditLog")
}

model SystemSetting {
  id          String          @id @default(uuid())
  tenantId    String
  environment EnvironmentType @default(PRODUCTION)
  key         String
  value       Json            @default("{}")
  description String?         @db.Text
  isSensitive Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, environment, key], map: "uq_system_setting_composite")
  @@index([tenantId, environment], map: "idx_system_setting_tenant_env")
  @@map("SystemSetting")
}

model DataRetentionPolicy {
  id            String   @id @default(uuid())
  tenantId      String
  modelName     String
  retentionDays Int      @default(365)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, modelName], map: "uq_retention_model")
  @@index([tenantId], map: "idx_retention_tenant")
  @@map("DataRetentionPolicy")
}

model Afk {
  id        String   @id @default(uuid())
  user      String   @map("User")
  guild     String   @map("Guild")
  message   String?  @map("Message")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guild, user])
  @@map("AFK")
}

model Antilink {
  id        String   @id @default(uuid())
  guild     String   @map("Guild")
  perms     String   @map("Perms")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guild])
  @@map("Antilink")
}

model ApiKey {
  id        String   @id @default(uuid())
  userId    String
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  tenantId  String?
  lastUsedAt DateTime?
  metadata  Json     @default("{}")

  user User @relation("UserApiKeys", fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
  @@unique([userId, name], map: "uq_api_key_user_name")
  @@map("ApiKey")
}

model ApiSystem {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  maintenanceMode   Boolean  @default(false)
  maintenanceReason String?  @db.Text
  tenantId  String?
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([createdAt])
  @@map("ApiSystem")
}

model Autoresponder {
  id            String   @id @default(uuid())
  guildId       String
  autoresponses Json     @default("[]")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([guildId])
  @@map("AutoResponder")
}

model Balance {
  id          String   @id @default(uuid())
  userId      String   @unique
  balance     Decimal  @default(100) @db.Decimal(18, 2)
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Balance")
}

model Ban {
  id        String   @id @default(uuid())
  userId    String
  username  String
  guildId   String
  reason    String
  bannedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guildId])
  @@map("Ban")
}

model BetaKey {
  id        String   @id @default(uuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation("UserBetaKeys", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@map("BetaKey")
}

model BetaSystem {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  tenantId  String?
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([createdAt])
  @@map("BetaSystem")
}

model Blog {
  id                String   @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String   @db.Text
  projectId         String?
  author            String
  tags              Json     @default("[]")
  tenantId          String?
  publishedAt       DateTime?
  isArchived        Boolean  @default(false)
  deletedAt         DateTime?
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  project  Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  tenant   Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  comments Comment[]
  likes    Like[]
  dislikes Dislike[]
  shares   Share[]

  @@index([projectId])
  @@index([tenantId])
  @@index([isArchived])
  @@index([createdAt])
  @@fulltext([title, shortDescription, detailDescription], map: "ft_blog_search")
  @@map("Blog")
}

model Bug {
  id          String      @id @default(uuid())
  title       String
  description String      @db.Text
  severity    BugSeverity @default(MEDIUM)
  status      BugStatus   @default(OPEN)
  projectId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([severity])
  @@index([createdAt])
  @@map("Bug")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Category")
}

model Chat {
  id           String   @id @default(uuid())
  participants Json     @default("[]")
  type         ChatType
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  messages Message[]

  @@map("Chat")
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  authorId  String
  blogId    String
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([blogId])
  @@index([createdAt])
  @@map("Comment")
}

model Company {
  id           String   @id @default(uuid())
  name         String
  description  String   @default("") @db.Text
  industry     String   @default("")
  headquarters String   @default("")
  foundedDate  String   @default("")
  employees    Int      @default(0)
  website      String   @default("")
  tenantId     String?
  isArchived   Boolean  @default(false)
  deletedAt    DateTime?
  metadata     Json     @default("{}")
  createdDate  DateTime @default(now())
  updatedDate  DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([name], map: "idx_company_name")
  @@index([tenantId])
  @@index([isArchived])
  @@unique([tenantId, name], map: "uq_company_tenant_name")
  @@map("Company")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  tenantId  String?
  isArchived Boolean  @default(false)
  deletedAt DateTime?
  metadata  Json      @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders         Order[]
  customerOrders CustomerOrder[]
  tenant         Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([isArchived])
  @@index([createdAt])
  @@unique([tenantId, email], map: "uq_customer_tenant_email")
  @@map("Customer")
}

model CustomerOrder {
  id              String              @id @default(uuid())
  customerId      String
  orderNumber     String              @unique
  orderDate       DateTime            @default(now())
  status          CustomerOrderStatus @default(PENDING)
  items           Json                @default("[]")
  totalAmount     Decimal             @db.Decimal(18, 2)
  shippingAddress String
  billingAddress  String
  tenantId        String?
  isArchived      Boolean             @default(false)
  deletedAt       DateTime?
  metadata        Json                @default("{}")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  returns  Return[]

  @@index([customerId])
  @@index([tenantId])
  @@index([isArchived])
  @@index([createdAt])
  @@index([status])
  @@unique([tenantId, orderNumber], map: "uq_customer_order_tenant_number")
  @@map("CustomerOrder")
}

model DeveloperProgram {
  id        String   @id @default(uuid())
  userId    String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("DeveloperProgram")
}

model Dislike {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([blogId])
  @@index([createdAt])
  @@map("Dislike")
}

model Favorite {
  id          String       @id @default(uuid())
  userId      String
  type        FavoriteType
  itemId      String
  metadata    Json         @default("{}")
  createdDate DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdDate])
  @@unique([userId, type, itemId], map: "uq_favorite_user_item")
  @@map("Favorite")
}

model Feature {
  id          String        @id @default(uuid())
  title       String
  description String        @db.Text
  projectId   String
  status      FeatureStatus @default(PLANNED)
  priority    PriorityLevel @default(MEDIUM)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("Feature")
}

model Feedback {
  id           String   @id @default(uuid())
  userId       String
  guildId      String
  feedbackText String   @db.Text
  tenantId     String?
  category     String?
  metadata     Json     @default("{}")
  resolvedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([guildId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("Feedback")
}

model File {
  id         String   @id @default(uuid())
  filename   String
  path       String
  url        String?
  size       Int
  mimetype   String
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([path])
  @@map("File")
}

model Game {
  id                String    @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String?
  genre             String?
  releaseDate       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  developer         String?
  platforms         Json      @default("[]")
  ratings           Json      @default("[]")

  @@map("Game")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  members     Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Group")
}

model Issue {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  status      BugStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([createdAt])
  @@map("Issue")
}

model JoinRole {
  id        String   @id @default(uuid())
  guild     String   @map("Guild")
  roleId    String   @map("RoleID")
  roleName  String   @map("RoleName")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guild, roleId])
  @@map("JoinRole")
}

model Kick {
  id        String   @id @default(uuid())
  userId    String
  username  String
  guildId   String
  reason    String
  kickedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guildId])
  @@map("Kick")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([blogId])
  @@index([createdAt])
  @@map("Like")
}

model Log {
  id             String   @id @default(uuid())
  message        String   @db.Text
  level          LogLevel @default(INFO)
  timestamp      DateTime @default(now())
  additionalData Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("Log")
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String   @db.Text
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@map("Message")
}

model Mute {
  id        String    @id @default(uuid())
  guildId   String
  userId    String
  reason    String    @default("No reason provided")
  mutedAt   DateTime  @default(now())
  duration  Int
  unmutedAt DateTime?
  updatedAt DateTime  @updatedAt

  @@index([guildId])
  @@map("Mute")
}

model Newsletter {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  subscribedAt DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("Newsletter")
}

model Order {
  id             String      @id @default(uuid())
  customerId     String
  products       Json        @default("[]")
  totalAmount    Decimal     @db.Decimal(18, 2)
  status         OrderStatus @default(PENDING)
  trackingNumber String?
  tenantId       String?
  isArchived     Boolean     @default(false)
  deletedAt      DateTime?
  metadata       Json        @default("{}")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([customerId])
  @@index([tenantId])
  @@index([status])
  @@index([isArchived])
  @@index([createdAt])
  @@map("Order")
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  foundedDate DateTime @default(now())
  members     Json     @default("[]")
  tenantId    String?
  isArchived  Boolean  @default(false)
  deletedAt   DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([isArchived])
  @@unique([tenantId, name], map: "uq_organization_tenant_name")
  @@index([createdAt])
  @@map("Organization")
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  amount        Decimal       @db.Decimal(18, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  tenantId      String?
  processedAt   DateTime?
  isArchived    Boolean       @default(false)
  deletedAt     DateTime?
  metadata      Json          @default("{}")
  createdDate   DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([tenantId])
  @@index([status])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, transactionId], map: "uq_payment_tenant_transaction")
  @@map("Payment")
}

model Platform {
  id          String    @id @default(uuid())
  picture     String?
  title       String
  description String?
  releaseDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("Platform")
}

model Prefix {
  id        String   @id @default(uuid())
  guildId   String   @unique
  prefix    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Prefix")
}

model Product {
  id                String   @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String   @default("") @db.Text
  price             Decimal  @db.Decimal(18, 2)
  category          String   @default("")
  stock             Int      @default(0)
  sku               String?
  currency          String   @default("USD")
  tenantId          String?
  isArchived        Boolean  @default(false)
  deletedAt         DateTime?
  metadata          Json     @default("{}")
  createdDate       DateTime @default(now())
  updatedDate       DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([category])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, sku], map: "uq_product_tenant_sku")
  @@map("Product")
}

model Project {
  id                String        @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String        @default("") @db.Text
  status            ProjectStatus @default(NOT_STARTED)
  startDate         DateTime      @default(now())
  endDate           DateTime?
  members           Json          @default("[]")
  tags              Json          @default("[]")
  tenantId          String?
  isArchived        Boolean       @default(false)
  deletedAt         DateTime?
  metadata          Json          @default("{}")
  createdDate       DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  blogs    Blog[]
  bugs     Bug[]
  features Feature[]
  issues   Issue[]
  stories  Story[]
  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([tenantId])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, title], map: "uq_project_tenant_title")
  @@map("Project")
}

model Report {
  id             String   @id @default(uuid())
  userId         String
  guildId        String
  reportedUserId String
  reason         String   @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([guildId])
  @@index([createdAt])
  @@map("Report")
}

model Return {
  id           String       @id @default(uuid())
  orderId      String
  returnNumber String       @unique
  returnDate   DateTime     @default(now())
  reason       String
  status       ReturnStatus @default(REQUESTED)
  items        Json         @default("[]")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  order CustomerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([createdAt])
  @@map("Return")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  color       String   @default("#000000")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Role")
}

model Roleplay {
  id               String   @id @default(uuid())
  userId           String   @unique
  characterName    String
  characterLevel   Int      @default(1)
  experiencePoints Int      @default(0)
  lastRoleplayDate DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("Roleplay")
}

model Share {
  id        String        @id @default(uuid())
  userId    String
  blogId    String
  platform  SharePlatform
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([blogId])
  @@index([createdAt])
  @@map("Share")
}

model Slowmode {
  id        String   @id @default(uuid())
  channelId String   @unique
  duration  Int
  setBy     String
  setAt     DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Slowmode")
}

model Story {
  id          String        @id @default(uuid())
  title       String
  description String        @db.Text
  status      StoryStatus   @default(BACKLOG)
  priority    PriorityLevel @default(MEDIUM)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("Story")
}

model Subscriber {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  subscribedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("Subscriber")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String   @default("")
  createdDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Tag")
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String       @default("") @db.Text
  category     TaskCategory @default(OTHER)
  status       TaskStatus   @default(PENDING)
  assignedToId String
  teamId       String
  dueDate      DateTime?
  tenantId     String?
  priority     PriorityLevel @default(MEDIUM)
  estimateHours Decimal?     @db.Decimal(10, 2)
  isArchived   Boolean       @default(false)
  deletedAt    DateTime?
  metadata     Json          @default("{}")
  createdDate  DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  assignedTo User @relation("TaskAssignee", fields: [assignedToId], references: [id], onDelete: Cascade)
  team       Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tenant     Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([assignedToId])
  @@index([teamId])
  @@index([tenantId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([createdAt])
  @@index([isArchived])
  @@unique([teamId, title, assignedToId], map: "uq_task_team_title_assignee")
  @@map("Task")
}

model Team {
  id          String     @id @default(uuid())
  name        String
  description String     @default("") @db.Text
  createdDate DateTime   @default(now())
  members     Json       @default("[]")
  status      TeamStatus @default(ACTIVE)
  type        TeamType   @default(OTHER)
  logo        String     @default("default-team-logo.png")
  ownerId     String?
  tenantId    String?
  isArchived  Boolean    @default(false)
  deletedAt   DateTime?
  metadata    Json       @default("{}")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  owner User? @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  tasks  Task[]

  @@index([tenantId])
  @@index([ownerId])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, name], map: "uq_team_tenant_name")
  @@map("Team")
}

model Ticket {
  id          String       @id @default(uuid())
  guildId     String
  userId      String
  title       String
  description String       @default("No description provided") @db.Text
  status      TicketStatus @default(OPEN)
  messages    Json         @default("[]")
  tenantId    String?
  assignedToId String?
  priority    PriorityLevel @default(MEDIUM)
  category    String?
  slaDueAt    DateTime?
  isArchived  Boolean       @default(false)
  deletedAt   DateTime?
  metadata    Json          @default("{}")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  assignedTo User?           @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  tenant     Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  responses  TicketResponse[]

  @@index([guildId])
  @@index([userId])
  @@index([tenantId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([isArchived])
  @@index([createdAt])
  @@index([tenantId, status], map: "idx_ticket_tenant_status")
  @@map("Ticket")
}

model TicketResponse {
  id        String   @id @default(uuid())
  ticketId  String
  userId    String
  response  String   @db.Text
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([userId])
  @@index([createdAt])
  @@map("TicketResponse")
}

model Timeout {
  id        String   @id @default(uuid())
  userId    String
  username  String
  guildId   String
  reason    String
  duration  Int
  timeoutAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guildId])
  @@map("Timeout")
}

model TriviaAnswer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  answer     String
  correct    Boolean
  answeredAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question TriviaQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("TriviaAnswer")
}

model TriviaQuestion {
  id            String   @id @default(uuid())
  question      String   @db.Text
  options       Json     @default("[]")
  correctAnswer String
  category      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  answers TriviaAnswer[]

  @@map("TriviaQuestion")
}

model TriviaStats {
  id               String   @id @default(uuid())
  userId           String   @unique
  correctAnswers   Int      @default(0)
  incorrectAnswers Int      @default(0)
  totalQuestions   Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("TriviaStats")
}

model User {
  id                       String    @id @default(uuid())
  profilePicture           String?
  fullname                 String
  username                 String    @unique
  email                    String    @unique
  password                 String?
  role                     UserRole  @default(USER)
  bio                      String    @default("") @db.Text
  address                  Json      @default("{}")
  phoneNumbers             Json      @default("{}")
  paymentMethods           Json      @default("[]")
  sessions                 Json      @default("[]")
  socialLinks              Json      @default("{}")
  recentActivity           DateTime  @default(now())
  lastLoginAt              DateTime?
  inactiveSince            DateTime?
  verificationToken        String    @default("")
  verificationTokenExpires DateTime?
  isVerified               Boolean   @default(false)
  isAuthenticated          Boolean   @default(false)
  accessToken              String?
  refreshToken             String?
  oauthProviders           Json      @default("{}")
  apiKeyId                 String?   @map("apiKey")
  betaKeyId                String?   @map("betaKey")
  isBetaTester             Boolean   @default(false)
  termsAccepted            Boolean   @default(false)
  termsAcceptedAt          DateTime?
  tenantId                 String?
  passwordChangedAt        DateTime?
  loginAttempts            Int       @default(0)
  mfaEnabled               Boolean   @default(false)
  posts                    Json      @default("[]")
  projects                 Json      @default("[]")
  friends                  Json      @default("[]")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  apiKeys           ApiKey[]           @relation("UserApiKeys")
  betaKeys          BetaKey[]          @relation("UserBetaKeys")
  balance           Balance?
  developerPrograms DeveloperProgram[]
  favorites         Favorite[]
  likes             Like[]
  dislikes          Dislike[]
  shares            Share[]
  comments          Comment[]
  payments          Payment[]
  tasksAssigned     Task[]             @relation("TaskAssignee")
  tenant            Tenant?            @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  auditLogs         AuditLog[]         @relation("UserAuditLogs")
  teamsOwned        Team[]             @relation("TeamOwner")

  @@index([email], map: "idx_user_email")
  @@index([tenantId])
  @@index([role])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@map("User")
}

model Version {
  id                String   @id @default(uuid())
  picture           String   @default("")
  title             String
  shortDescription  String
  detailDescription String   @db.Text
  versionTagId      String
  features          Json     @default("[]")
  added             Json     @default("[]")
  fixed             Json     @default("[]")
  bugs              Json     @default("[]")
  developers        Json     @default("[]")
  githublink        String   @default("")
  downloadLink      String
  releasedAt        DateTime
  tenantId          String?
  isArchived        Boolean  @default(false)
  deletedAt         DateTime?
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  versionTag VersionTag @relation(fields: [versionTagId], references: [id], onDelete: Cascade)
  tenant     Tenant?    @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([versionTagId])
  @@index([tenantId])
  @@index([releasedAt])
  @@index([createdAt])
  @@index([isArchived])
  @@unique([tenantId, title, versionTagId], map: "uq_version_tenant_title_tag")
  @@map("Version")
}

model VersionTag {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  tenantId    String?
  isArchived  Boolean  @default(false)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  versions Version[]

  @@index([tenantId])
  @@index([isArchived])
  @@unique([tenantId, title], map: "uq_version_tag_tenant_title")
  @@map("VersionTag")
}

model Warn {
  id          String   @id @default(uuid())
  guildId     String
  userId      String
  moderatorId String
  reason      String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([guildId])
  @@map("Warn")
}

model Word {
  id        String   @id @default(uuid())
  guildId   String
  word      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guildId])
  @@map("Word")
}
