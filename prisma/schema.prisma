// Prisma Schema für NodCord
// MySQL ist die primäre Datenbank. Passe Models bei Bedarf an die aktuellen Anforderungen an.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String
  passwordHash  String
  discordId     String?  @unique
  roles         UserRole[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projects      Project[]
  tickets       Ticket[]
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  users       UserRole[]
  createdAt   DateTime   @default(now())
}

model UserRole {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@id([userId, roleId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  tickets     Ticket[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Ticket {
  id          String    @id @default(cuid())
  title       String
  content     String
  status      TicketStatus @default(OPEN)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
