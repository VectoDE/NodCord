// Prisma Schema for NodCord
// Generated to mirror the Mongoose models with production-grade defaults and constraints

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BugStatus {
  OPEN        @map("open")
  IN_PROGRESS @map("in_progress")
  RESOLVED    @map("resolved")
  CLOSED      @map("closed")
}

enum ChatType {
  MEMBER_TO_MEMBER       @map("member_to_member")
  MEMBER_TO_ORGANIZATION @map("member_to_organization")
  MEMBER_TO_GROUP        @map("member_to_group")
}

enum FavoriteType {
  PROJECT @map("project")
  PRODUCT @map("product")
  TASK    @map("task")
  COMPANY @map("company")
}

enum FeatureStatus {
  PLANNED     @map("planned")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
}

enum LogLevel {
  INFO  @map("info")
  WARN  @map("warn")
  ERROR @map("error")
}

enum OrderStatus {
  PENDING   @map("pending")
  SHIPPED   @map("shipped")
  DELIVERED @map("delivered")
  CANCELLED @map("cancelled")
}

enum PaymentMethod {
  CREDIT_CARD   @map("credit_card")
  APPLE_PAY     @map("apple_pay")
  GOOGLE_PAY    @map("google_pay")
  AMAZON_PAY    @map("amazon_pay")
  STRIPE        @map("stripe")
  PAYPAL        @map("paypal")
  BANK_TRANSFER @map("bank_transfer")
}

enum PaymentStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")
  FAILED    @map("failed")
}

enum BillingCycle {
  DAILY       @map("daily")
  WEEKLY      @map("weekly")
  MONTHLY     @map("monthly")
  QUARTERLY   @map("quarterly")
  SEMI_ANNUAL @map("semi_annual")
  YEARLY      @map("yearly")
}

enum SubscriptionTier {
  FREE       @map("free")
  STANDARD   @map("standard")
  PREMIUM    @map("premium")
  ENTERPRISE @map("enterprise")
}

enum InvoiceStatus {
  DRAFT    @map("draft")
  PENDING  @map("pending")
  SENT     @map("sent")
  PAID     @map("paid")
  OVERDUE  @map("overdue")
  VOID     @map("void")
  REFUNDED @map("refunded")
}

enum InvoiceDeliveryMethod {
  EMAIL        @map("email")
  PDF_DOWNLOAD @map("pdf_download")
  WEBHOOK      @map("webhook")
  PORTAL       @map("portal")
}

enum TaxType {
  VAT         @map("vat")
  GST         @map("gst")
  SALES       @map("sales")
  SERVICE     @map("service")
  DIGITAL     @map("digital")
  WITHHOLDING @map("withholding")
  NONE        @map("none")
}

enum TaxJurisdictionType {
  COUNTRY  @map("country")
  STATE    @map("state")
  PROVINCE @map("province")
  CITY     @map("city")
  COUNTY   @map("county")
  DISTRICT @map("district")
}

enum DiscountType {
  PERCENTAGE   @map("percentage")
  FIXED_AMOUNT @map("fixed_amount")
  FREE_TRIAL   @map("free_trial")
  CREDIT       @map("credit")
}

enum UsageAggregation {
  COUNT    @map("count")
  DURATION @map("duration")
  VOLUME   @map("volume")
  CUSTOM   @map("custom")
}

enum AnalyticsEventCategory {
  ENGAGEMENT  @map("engagement")
  MODERATION  @map("moderation")
  ECONOMY     @map("economy")
  SYSTEM      @map("system")
  INTEGRATION @map("integration")
  AUTOMATION  @map("automation")
}

enum ReportFrequency {
  DAILY     @map("daily")
  WEEKLY    @map("weekly")
  MONTHLY   @map("monthly")
  QUARTERLY @map("quarterly")
  YEARLY    @map("yearly")
  CUSTOM    @map("custom")
}

enum BillingContactType {
  PRIMARY   @map("primary")
  TECHNICAL @map("technical")
  FINANCE   @map("finance")
  LEGAL     @map("legal")
  SUPPORT   @map("support")
}

enum GatewayProvider {
  STRIPE    @map("stripe")
  PAYPAL    @map("paypal")
  BRAINTREE @map("braintree")
  ADYEN     @map("adyen")
  SQUARE    @map("square")
  CUSTOM    @map("custom")
}

enum InvoiceLineType {
  PRODUCT    @map("product")
  SERVICE    @map("service")
  DISCOUNT   @map("discount")
  TAX        @map("tax")
  FEE        @map("fee")
  ADJUSTMENT @map("adjustment")
}

enum SubscriptionCycleStatus {
  PENDING  @map("pending")
  ACTIVE   @map("active")
  INVOICED @map("invoiced")
  CLOSED   @map("closed")
  FAILED   @map("failed")
}

enum PriorityLevel {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
}

enum ProjectStatus {
  NOT_STARTED @map("not_started")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  ON_HOLD     @map("on_hold")
}

enum ReturnStatus {
  REQUESTED @map("requested")
  APPROVED  @map("approved")
  REJECTED  @map("rejected")
  COMPLETED @map("completed")
}

enum SharePlatform {
  FACEBOOK @map("facebook")
  TWITTER  @map("twitter")
  LINKEDIN @map("linked_in")
  OTHER    @map("other")
}

enum StoryStatus {
  BACKLOG     @map("backlog")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
}

enum TaskCategory {
  DEVELOPMENT @map("development")
  MARKETING   @map("marketing")
  DESIGN      @map("design")
  MANAGEMENT  @map("management")
  OTHER       @map("other")
}

enum TaskStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  ON_HOLD     @map("on_hold")
}

enum TeamStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum TeamType {
  PROJECT    @map("project")
  DEPARTMENT @map("department")
  ESPORTS    @map("esports")
  OTHER      @map("other")
}

enum TicketStatus {
  OPEN   @map("open")
  CLOSED @map("closed")
}

enum UserRole {
  USER      @map("user")
  ADMIN     @map("admin")
  MODERATOR @map("moderator")
}

enum TenantStatus {
  ONBOARDING @map("onboarding")
  ACTIVE     @map("active")
  SUSPENDED  @map("suspended")
  CANCELLED  @map("cancelled")
}

enum AuditAction {
  CREATED             @map("created")
  UPDATED             @map("updated")
  DELETED             @map("deleted")
  ACCESSED            @map("accessed")
  LOGIN               @map("login")
  LOGOUT              @map("logout")
  PERMISSION_CHANGED  @map("permission_changed")
  SECURITY_EVENT      @map("security_event")
  SYSTEM_CONFIGURATION @map("system_configuration")
}

enum AfkStatus {
  ACTIVE  @map("active")
  RETURNED @map("returned")
  EXPIRED @map("expired")
}

enum EnvironmentType {
  PRODUCTION  @map("production")
  STAGING     @map("staging")
  DEVELOPMENT @map("development")
  TEST        @map("test")
}

enum AutoResponderMatchType {
  EXACT    @map("exact")
  CONTAINS @map("contains")
  REGEX    @map("regex")
}

enum OAuthProvider {
  GITHUB @map("github")
  GOOGLE @map("google")
}

enum PhoneNumberType {
  MOBILE   @map("mobile")
  LANDLINE @map("landline")
  BUSINESS @map("business")
}

enum SocialLinkType {
  FACEBOOK  @map("facebook")
  TWITTER   @map("twitter")
  GOOGLE    @map("google")
  LINKEDIN  @map("linkedin")
  INSTAGRAM @map("instagram")
  GITHUB    @map("github")
  DISCORD   @map("discord")
}

enum ChatParticipantType {
  USER         @map("user")
  ORGANIZATION @map("organization")
  GROUP        @map("group")
  EXTERNAL     @map("external")
}

enum MembershipEventType {
  ADDED   @map("added")
  UPDATED @map("updated")
  REMOVED @map("removed")
}

enum CommentStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
  SPAM     @map("spam")
}

enum GroupVisibility {
  PUBLIC  @map("public")
  PRIVATE @map("private")
  SECRET  @map("secret")
}

enum MessageStatus {
  SENT      @map("sent")
  DELIVERED @map("delivered")
  READ      @map("read")
  ARCHIVED  @map("archived")
}

enum ModerationAppealStatus {
  NONE     @map("none")
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
}

enum ReportStatus {
  OPEN         @map("open")
  UNDER_REVIEW @map("under_review")
  RESOLVED     @map("resolved")
  DISMISSED    @map("dismissed")
}

enum RoleplayStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
  RETIRED  @map("retired")
}

enum SubscriptionStatus {
  ACTIVE        @map("active")
  TRIALING      @map("trialing")
  PAST_DUE      @map("past_due")
  CANCELLED     @map("cancelled")
  SUSPENDED     @map("suspended")
  EXPIRED       @map("expired")
  UNSUBSCRIBED  @map("unsubscribed")
  BOUNCED       @map("bounced")
}

enum TriviaDifficulty {
  EASY   @map("easy")
  MEDIUM @map("medium")
  HARD   @map("hard")
  EXPERT @map("expert")
}

model Tenant {
  id                String   @id @default(uuid())
  slug              String   @unique
  name              String
  status            TenantStatus @default(ONBOARDING)
  plan              String   @default("free")
  metadata          Json     @default("{}")
  timezone          String   @default("UTC")
  billingEmail      String?
  technicalContact  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  apiKeys        ApiKey[]
  apiSystems     ApiSystem[]
  auditLogs      AuditLog[]
  betaSystems    BetaSystem[]
  blogs          Blog[]
  companies      Company[]
  customerOrders CustomerOrder[]
  customers      Customer[]
  dataRetentionPolicies DataRetentionPolicy[]
  feedback       Feedback[]
  orders         Order[]
  organizations  Organization[]
  payments       Payment[]
  paymentGateways PaymentGateway[]
  paymentPayouts  PaymentPayout[]
  paymentReconciliations PaymentReconciliation[]
  products       Product[]
  projects       Project[]
  billingProfiles BillingProfile[]
  subscriptionPlans SubscriptionPlan[]
  subscriptionAddons SubscriptionAddon[]
  subscriptions  Subscription[]
  invoices       Invoice[]
  taxJurisdictions TaxJurisdiction[]
  financialReports FinancialReport[]
  financialSnapshots FinancialSnapshot[]
  analyticsSessions AnalyticsSession[]
  analyticsEvents   AnalyticsEvent[]
  analyticsDashboards AnalyticsDashboardWidget[]
  analyticsReports AnalyticsReport[]
  analyticsGoals   AnalyticsGoal[]
  afkRecords     Afk[]
  antiLinkRules  Antilink[]
  autoResponders Autoresponder[]
  autoResponderEntries AutoResponderEntry[]
  categories     Category[]
  chats          Chat[]
  comments       Comment[]
  games          Game[]
  groups         Group[]
  issues         Issue[]
  joinRoles      JoinRole[]
  kicks          Kick[]
  bans           Ban[]
  logs           Log[]
  messages       Message[]
  mutes          Mute[]
  newsletters    Newsletter[]
  platforms      Platform[]
  prefixes       Prefix[]
  reports        Report[]
  roles          Role[]
  roleplays      Roleplay[]
  slowmodes      Slowmode[]
  subscribers    Subscriber[]
  tags           Tag[]
  triviaQuestions TriviaQuestion[]
  triviaAnswers  TriviaAnswer[]
  triviaStats    TriviaStats[]
  warns          Warn[]
  words          Word[]
  systemSettings SystemSetting[]
  tasks          Task[]
  teams          Team[]
  tickets        Ticket[]
  users          User[]
  versions       Version[]
  versionTags    VersionTag[]
  metadataRecords TenantMetadata[]

  @@index([status], map: "idx_tenant_status")
  @@index([createdAt], map: "idx_tenant_created_at")
  @@map("tenant")
}

model TenantMetadata {
  id        String   @id @default(uuid())
  tenantId  String
  key       String
  value     Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId], map: "idx_tenant_metadata_tenant")
  @@unique([tenantId, key], map: "uq_tenant_metadata_key")
  @@map("tenant_metadata")
}

model AuditLog {
  id         String      @id @default(uuid())
  tenantId   String
  actorId    String?
  entityName String
  entityId   String
  action     AuditAction
  changes    Json        @default("{}")
  ipAddress  String?
  userAgent  String?
  context    Json        @default("{}")
  createdAt  DateTime    @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actor  User?  @relation("UserAuditLogs", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([tenantId, entityName, entityId], map: "idx_audit_entity")
  @@index([createdAt], map: "idx_audit_created_at")
  @@map("audit_log")
}

model SystemSetting {
  id          String          @id @default(uuid())
  tenantId    String
  environment EnvironmentType @default(PRODUCTION)
  key         String
  value       Json            @default("{}")
  description String?         @db.Text
  isSensitive Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, environment, key], map: "uq_system_setting_composite")
  @@index([tenantId, environment], map: "idx_system_setting_tenant_env")
  @@map("system_setting")
}

model DataRetentionPolicy {
  id            String   @id @default(uuid())
  tenantId      String
  modelName     String
  retentionDays Int      @default(365)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, modelName], map: "uq_retention_model")
  @@index([tenantId], map: "idx_retention_tenant")
  @@map("data_retention_policy")
}

model Afk {
  id        String   @id @default(uuid())
  user      String   @map("user")
  guild     String   @map("guild")
  message   String?  @map("message")
  tenantId  String?
  status    AfkStatus @default(ACTIVE)
  reason    String?  @db.Text
  expiresAt DateTime?
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("AfkCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("AfkUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([guild, user])
  @@index([tenantId], map: "idx_afk_tenant")
  @@index([expiresAt], map: "idx_afk_expires")
  @@index([status], map: "idx_afk_status")
  @@map("afk")
}

model Antilink {
  id        String   @id @default(uuid())
  guild     String   @map("guild")
  perms     String   @map("perms")
  tenantId  String?
  isEnabled Boolean  @default(true)
  lastTriggeredAt DateTime?
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("AntilinkCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("AntilinkUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([guild])
  @@index([tenantId], map: "idx_antilink_tenant")
  @@index([isEnabled], map: "idx_antilink_enabled")
  @@map("antilink")
}

model ApiKey {
  id        String   @id @default(uuid())
  userId    String
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  tenantId  String?
  lastUsedAt DateTime?
  metadata  Json     @default("{}")

  user User @relation("UserApiKeys", fields: [userId], references: [id], onDelete: Cascade)
  primaryOwner User? @relation("UserPrimaryApiKey")
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  metadataRecords ApiKeyMetadata[]

  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
  @@unique([userId, name], map: "uq_api_key_user_name")
  @@map("api_key")
}

model ApiKeyMetadata {
  id       String   @id @default(uuid())
  apiKeyId String
  key      String
  value    Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  apiKey ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId], map: "idx_api_key_metadata_parent")
  @@unique([apiKeyId, key], map: "uq_api_key_metadata_key")
  @@map("api_key_metadata")
}

model ApiSystem {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  maintenanceMode   Boolean  @default(false)
  maintenanceReason String?  @db.Text
  tenantId  String?
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  metadataRecords ApiSystemMetadata[]

  @@index([tenantId])
  @@index([createdAt])
  @@map("api_system")
}

model ApiSystemMetadata {
  id          String   @id @default(uuid())
  apiSystemId String
  key         String
  value       Json     @default("null")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  apiSystem ApiSystem @relation(fields: [apiSystemId], references: [id], onDelete: Cascade)

  @@index([apiSystemId], map: "idx_api_system_metadata_parent")
  @@unique([apiSystemId, key], map: "uq_api_system_metadata_key")
  @@map("api_system_metadata")
}

model Autoresponder {
  id            String   @id @default(uuid())
  guildId       String
  autoresponses Json     @default("[]")
  tenantId      String?
  name          String   @default("")
  description   String?  @db.Text
  isActive      Boolean  @default(true)
  lastTriggeredAt DateTime?
  metadata      Json     @default("{}")
  createdById   String?
  updatedById   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("AutoresponderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("AutoresponderUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  responseRecords AutoResponderEntry[]

  @@unique([guildId])
  @@index([tenantId], map: "idx_autoresponder_tenant")
  @@index([isActive], map: "idx_autoresponder_active")
  @@index([lastTriggeredAt], map: "idx_autoresponder_last_triggered")
  @@map("auto_responder")
}

model AutoResponderEntry {
  id               String   @id @default(uuid())
  autoresponderId  String
  trigger          String
  response         String   @db.Text
  matchType        AutoResponderMatchType @default(EXACT)
  priority         PriorityLevel          @default(MEDIUM)
  isActive         Boolean                @default(true)
  responseDelayMs  Int?
  tenantId         String?
  lastTriggeredAt  DateTime?
  metadata         Json                   @default("{}")
  createdById      String?
  updatedById      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  autoresponder Autoresponder @relation(fields: [autoresponderId], references: [id], onDelete: Cascade)
  tenant        Tenant?        @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy     User?          @relation("AutoResponderEntryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy     User?          @relation("AutoResponderEntryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([autoresponderId], map: "idx_autoresponder_entry_parent")
  @@index([tenantId], map: "idx_autoresponder_entry_tenant")
  @@index([matchType], map: "idx_autoresponder_entry_match_type")
  @@index([isActive], map: "idx_autoresponder_entry_active")
  @@index([priority], map: "idx_autoresponder_entry_priority")
  @@unique([autoresponderId, trigger], map: "uq_autoresponder_trigger")
  @@map("auto_responder_entry")
}

model Balance {
  id          String   @id @default(uuid())
  userId      String   @unique
  balance     Decimal  @default(100) @db.Decimal(18, 2)
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("balance")
}

model Ban {
  id        String   @id @default(uuid())
  userId    String
  username  String
  guildId   String
  reason    String
  bannedAt  DateTime @default(now())
  tenantId  String?
  moderatorId String?
  expiresAt DateTime?
  unbannedAt DateTime?
  appealStatus ModerationAppealStatus @default(NONE)
  appealedAt DateTime?
  resolvedAt DateTime?
  context   Json     @default("{}")
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  moderator User?   @relation("BanModerator", fields: [moderatorId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("BanCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("BanUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_ban_tenant")
  @@index([guildId], map: "idx_ban_guild")
  @@index([moderatorId], map: "idx_ban_moderator")
  @@index([appealStatus], map: "idx_ban_appeal_status")
  @@index([expiresAt], map: "idx_ban_expires_at")
  @@map("ban")
}

model BetaKey {
  id        String   @id @default(uuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation("UserBetaKeys", fields: [userId], references: [id], onDelete: SetNull)
  primaryOwner User? @relation("UserPrimaryBetaKey")

  @@index([userId])
  @@map("beta_key")
}

model BetaSystem {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  tenantId  String?
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  metadataRecords BetaSystemMetadata[]

  @@index([tenantId])
  @@index([createdAt])
  @@map("beta_system")
}

model BetaSystemMetadata {
  id          String   @id @default(uuid())
  betaSystemId String
  key         String
  value       Json     @default("null")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  betaSystem BetaSystem @relation(fields: [betaSystemId], references: [id], onDelete: Cascade)

  @@index([betaSystemId], map: "idx_beta_system_metadata_parent")
  @@unique([betaSystemId, key], map: "uq_beta_system_metadata_key")
  @@map("beta_system_metadata")
}

model Blog {
  id                String   @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String   @db.Text
  projectId         String?
  author            String
  tags              Json     @default("[]")
  tenantId          String?
  publishedAt       DateTime?
  isArchived        Boolean  @default(false)
  deletedAt         DateTime?
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  project  Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  tenant   Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  comments Comment[]
  likes    Like[]
  dislikes Dislike[]
  shares   Share[]
  tagRecords BlogTag[]
  metadataRecords BlogMetadata[]

  @@index([projectId])
  @@index([tenantId])
  @@index([isArchived])
  @@index([createdAt])
  @@fulltext([title, shortDescription, detailDescription], map: "ft_blog_search")
  @@map("blog")
}

model BlogMetadata {
  id      String   @id @default(uuid())
  blogId  String
  key     String
  value   Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId], map: "idx_blog_metadata_blog")
  @@unique([blogId, key], map: "uq_blog_metadata_key")
  @@map("blog_metadata")
}

model BlogTag {
  id      String @id @default(uuid())
  blogId  String
  value   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId], map: "idx_blog_tag_blog")
  @@unique([blogId, value], map: "uq_blog_tag_value")
  @@map("blog_tag")
}

model Bug {
  id          String       @id @default(uuid())
  title       String
  description String       @db.Text
  severity    PriorityLevel @default(MEDIUM)
  status      BugStatus    @default(OPEN)
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([severity])
  @@index([createdAt])
  @@map("bug")
}

model Category {
  id          String   @id @default(uuid())
  tenantId    String?
  name        String
  slug        String
  description String?  @db.Text
  icon        String?
  isActive    Boolean  @default(true)
  metadata    Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([tenantId, name], map: "uq_category_tenant_name")
  @@unique([tenantId, slug], map: "uq_category_tenant_slug")
  @@index([tenantId], map: "idx_category_tenant")
  @@index([isActive], map: "idx_category_active")
  @@map("category")
}

model Chat {
  id           String   @id @default(uuid())
  participants Json     @default("[]")
  type         ChatType
  tenantId     String?
  title        String?
  topic        String?  @db.Text
  isArchived   Boolean  @default(false)
  archivedAt   DateTime?
  lastMessageAt DateTime?
  metadata     Json     @default("{}")
  createdById  String?
  updatedById  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("ChatCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("ChatUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  participantRecords ChatParticipant[]
  messages Message[]

  @@index([tenantId], map: "idx_chat_tenant")
  @@index([isArchived], map: "idx_chat_archived")
  @@index([lastMessageAt], map: "idx_chat_last_message")
  @@map("chat")
}

model ChatParticipant {
  id                 String               @id @default(uuid())
  chatId             String
  participantId      String
  participantType    ChatParticipantType  @default(USER)
  userId             String?
  joinedAt           DateTime             @default(now())
  leftAt             DateTime?
  metadata           Json                 @default("{}")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User? @relation("ChatParticipantUser", fields: [userId], references: [id], onDelete: SetNull)

  @@index([chatId], map: "idx_chat_participant_chat")
  @@index([userId], map: "idx_chat_participant_user")
  @@unique([chatId, participantId], map: "uq_chat_participant")
  @@map("chat_participant")
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  authorId  String
  blogId    String
  tenantId  String?
  parentId  String?
  status    CommentStatus @default(PENDING)
  metadata  Json          @default("{}")
  updatedById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  parent Comment? @relation("CommentHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  replies Comment[] @relation("CommentHierarchy")
  updatedBy User?   @relation("CommentUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([authorId])
  @@index([blogId])
  @@index([tenantId], map: "idx_comment_tenant")
  @@index([status], map: "idx_comment_status")
  @@index([parentId], map: "idx_comment_parent")
  @@index([createdAt])
  @@map("comment")
}

model Company {
  id           String   @id @default(uuid())
  name         String
  description  String   @default("") @db.Text
  industry     String   @default("")
  headquarters String   @default("")
  foundedDate  String   @default("")
  employees    Int      @default(0)
  website      String   @default("")
  tenantId     String?
  isArchived   Boolean  @default(false)
  deletedAt    DateTime?
  metadata     Json     @default("{}")
  createdDate  DateTime @default(now())
  updatedDate  DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  metadataRecords CompanyMetadata[]

  @@index([name], map: "idx_company_name")
  @@index([tenantId])
  @@index([isArchived])
  @@unique([tenantId, name], map: "uq_company_tenant_name")
  @@map("company")
}

model CompanyMetadata {
  id        String   @id @default(uuid())
  companyId String
  key       String
  value     Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId], map: "idx_company_metadata_company")
  @@unique([companyId, key], map: "uq_company_metadata_key")
  @@map("company_metadata")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  tenantId  String?
  isArchived Boolean  @default(false)
  deletedAt DateTime?
  metadata  Json      @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders         Order[]
  customerOrders CustomerOrder[]
  tenant         Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  metadataRecords CustomerMetadata[]

  @@index([tenantId])
  @@index([isArchived])
  @@index([createdAt])
  @@unique([tenantId, email], map: "uq_customer_tenant_email")
  @@map("customer")
}

model CustomerMetadata {
  id         String   @id @default(uuid())
  customerId String
  key        String
  value      Json     @default("null")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId], map: "idx_customer_metadata_customer")
  @@unique([customerId, key], map: "uq_customer_metadata_key")
  @@map("customer_metadata")
}

model CustomerOrder {
  id              String       @id @default(uuid())
  customerId      String
  orderNumber     String       @unique
  orderDate       DateTime     @default(now())
  status          OrderStatus  @default(PENDING)
  items           Json         @default("[]")
  totalAmount     Decimal      @db.Decimal(18, 2)
  shippingAddress String
  billingAddress  String
  tenantId        String?
  isArchived      Boolean      @default(false)
  deletedAt       DateTime?
  metadata        Json         @default("{}")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  returns  Return[]
  itemRecords CustomerOrderItem[]
  metadataRecords CustomerOrderMetadata[]

  @@index([customerId])
  @@index([tenantId])
  @@index([isArchived])
  @@index([createdAt])
  @@index([status])
  @@unique([tenantId, orderNumber], map: "uq_customer_order_tenant_number")
  @@map("customer_order")
}

model CustomerOrderMetadata {
  id            String   @id @default(uuid())
  customerOrderId String
  key           String
  value         Json     @default("null")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customerOrder CustomerOrder @relation(fields: [customerOrderId], references: [id], onDelete: Cascade)

  @@index([customerOrderId], map: "idx_customer_order_metadata_parent")
  @@unique([customerOrderId, key], map: "uq_customer_order_metadata_key")
  @@map("customer_order_metadata")
}

model CustomerOrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int      @default(1)
  price      Decimal  @db.Decimal(18, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   CustomerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_customer_order_item_order")
  @@index([productId], map: "idx_customer_order_item_product")
  @@unique([orderId, productId], map: "uq_customer_order_item")
  @@map("customer_order_item")
}

model DeveloperProgram {
  id        String   @id @default(uuid())
  userId    String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("developer_program")
}

model Dislike {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([blogId])
  @@index([createdAt])
  @@map("dislike")
}

model Favorite {
  id          String       @id @default(uuid())
  userId      String
  type        FavoriteType
  itemId      String
  metadata    Json         @default("{}")
  createdDate DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadataRecords FavoriteMetadata[]

  @@index([userId])
  @@index([createdDate])
  @@unique([userId, type, itemId], map: "uq_favorite_user_item")
  @@map("favorite")
}

model FavoriteMetadata {
  id         String   @id @default(uuid())
  favoriteId String
  key        String
  value      Json     @default("null")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  favorite Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)

  @@index([favoriteId], map: "idx_favorite_metadata_parent")
  @@unique([favoriteId, key], map: "uq_favorite_metadata_key")
  @@map("favorite_metadata")
}

model Feature {
  id          String        @id @default(uuid())
  title       String
  description String        @db.Text
  projectId   String
  status      FeatureStatus @default(PLANNED)
  priority    PriorityLevel @default(MEDIUM)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("feature")
}

model Feedback {
  id           String   @id @default(uuid())
  userId       String
  guildId      String
  feedbackText String   @db.Text
  tenantId     String?
  category     String?
  metadata     Json     @default("{}")
  resolvedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  metadataRecords FeedbackMetadata[]

  @@index([guildId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("feedback")
}

model FeedbackMetadata {
  id         String   @id @default(uuid())
  feedbackId String
  key        String
  value      Json     @default("null")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId], map: "idx_feedback_metadata_feedback")
  @@unique([feedbackId, key], map: "uq_feedback_metadata_key")
  @@map("feedback_metadata")
}

model File {
  id         String   @id @default(uuid())
  filename   String
  path       String
  url        String?
  size       Int
  mimetype   String
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([path])
  @@map("file")
}

model Game {
  id                String    @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String?
  genre             String?
  releaseDate       DateTime?
  developer         String?
  publisher         String?
  website           String?
  tenantId          String?
  metadata          Json      @default("{}")
  isArchived        Boolean   @default(false)
  deletedAt         DateTime?
  averageRating     Decimal?  @db.Decimal(4, 2)
  reviewCount       Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  platforms         Json      @default("[]")
  ratings           Json      @default("[]")

  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  platformRecords GamePlatformLink[]
  ratingRecords   GameRating[]

  @@index([tenantId], map: "idx_game_tenant")
  @@index([isArchived], map: "idx_game_archived")
  @@index([averageRating], map: "idx_game_average_rating")
  @@map("game")
}

model GamePlatformLink {
  id        String   @id @default(uuid())
  gameId    String
  platformId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game     Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  platform Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@index([gameId], map: "idx_game_platform_game")
  @@index([platformId], map: "idx_game_platform_platform")
  @@unique([gameId, platformId], map: "uq_game_platform")
  @@map("game_platform_link")
}

model GameRating {
  id        String   @id @default(uuid())
  gameId    String
  userId    String
  rating    Int      @db.TinyInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User @relation("GameRatingUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([gameId], map: "idx_game_rating_game")
  @@index([userId], map: "idx_game_rating_user")
  @@unique([gameId, userId], map: "uq_game_rating_user")
  @@map("game_rating")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  members     Json     @default("[]")
  tenantId    String?
  visibility  GroupVisibility @default(PUBLIC)
  isArchived  Boolean         @default(false)
  deletedAt   DateTime?
  metadata    Json            @default("{}")
  createdById String?
  updatedById String?
  lastActivityAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("GroupCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("GroupUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  memberRecords GroupMember[]

  @@index([tenantId], map: "idx_group_tenant")
  @@index([isArchived], map: "idx_group_archived")
  @@index([lastActivityAt], map: "idx_group_last_activity")
  @@map("group")
}

model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  role      String?  @default("member")
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  historyRecords GroupMemberHistory[]

  @@index([groupId], map: "idx_group_member_group")
  @@index([userId], map: "idx_group_member_user")
  @@unique([groupId, userId], map: "uq_group_member_user")
  @@map("group_member")
}

model GroupMemberHistory {
  id           String              @id @default(uuid())
  groupMemberId String
  eventType    MembershipEventType @default(ADDED)
  actorId      String?
  description  String?             @db.Text
  occurredAt   DateTime            @default(now())
  createdAt    DateTime            @default(now())

  groupMember GroupMember @relation(fields: [groupMemberId], references: [id], onDelete: Cascade)
  actor       User?       @relation("GroupMemberHistoryActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([groupMemberId], map: "idx_group_member_history_parent")
  @@index([actorId], map: "idx_group_member_history_actor")
  @@map("group_member_history")
}

model Issue {
  id          String       @id @default(uuid())
  title       String
  description String       @db.Text
  status      BugStatus    @default(OPEN)
  severity    PriorityLevel @default(MEDIUM)
  priority    PriorityLevel @default(MEDIUM)
  tenantId    String?
  reportedById String?
  assignedToId String?
  dueDate     DateTime?
  resolvedAt  DateTime?
  metadata    Json          @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant  Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  reportedBy User? @relation("IssueReportedBy", fields: [reportedById], references: [id], onDelete: SetNull)
  assignedTo User? @relation("IssueAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([status])
  @@index([severity])
  @@index([priority])
  @@index([tenantId], map: "idx_issue_tenant")
  @@index([assignedToId], map: "idx_issue_assigned")
  @@index([dueDate], map: "idx_issue_due_date")
  @@index([resolvedAt], map: "idx_issue_resolved_at")
  @@index([createdAt])
  @@map("issue")
}

model JoinRole {
  id        String   @id @default(uuid())
  guild     String   @map("guild")
  roleId    String   @map("role_id")
  roleName  String   @map("role_name")
  tenantId  String?
  description String? @db.Text
  isActive  Boolean  @default(true)
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("JoinRoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("JoinRoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([guild, roleId])
  @@index([tenantId], map: "idx_join_role_tenant")
  @@index([isActive], map: "idx_join_role_active")
  @@map("join_role")
}

model Kick {
  id        String   @id @default(uuid())
  userId    String
  username  String
  guildId   String
  reason    String
  kickedAt  DateTime @default(now())
  tenantId  String?
  moderatorId String?
  appealStatus ModerationAppealStatus @default(NONE)
  appealedAt DateTime?
  resolvedAt DateTime?
  context   Json     @default("{}")
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  moderator User?   @relation("KickModerator", fields: [moderatorId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("KickCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("KickUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_kick_tenant")
  @@index([guildId], map: "idx_kick_guild")
  @@index([moderatorId], map: "idx_kick_moderator")
  @@index([appealStatus], map: "idx_kick_appeal_status")
  @@map("kick")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([blogId])
  @@index([createdAt])
  @@map("like")
}

model Log {
  id             String   @id @default(uuid())
  message        String   @db.Text
  level          LogLevel @default(INFO)
  environment    EnvironmentType @default(PRODUCTION)
  service        String?
  tenantId       String?
  correlationId  String?
  requestId      String?
  timestamp      DateTime @default(now())
  additionalData Json?
  metadata       Json     @default("{}")
  createdById    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("LogCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_log_tenant")
  @@index([environment], map: "idx_log_environment")
  @@index([service], map: "idx_log_service")
  @@index([correlationId], map: "idx_log_correlation")
  @@map("log")
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String   @db.Text
  timestamp DateTime @default(now())
  tenantId  String?
  status    MessageStatus @default(SENT)
  deliveredAt DateTime?
  readAt    DateTime?
  editedAt  DateTime?
  isPinned  Boolean  @default(false)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([chatId])
  @@index([tenantId], map: "idx_message_tenant")
  @@index([status], map: "idx_message_status")
  @@index([isPinned], map: "idx_message_pinned")
  @@map("message")
}

model Mute {
  id        String    @id @default(uuid())
  guildId   String
  userId    String
  reason    String    @default("No reason provided")
  mutedAt   DateTime  @default(now())
  duration  Int
  unmutedAt DateTime?
  tenantId  String?
  moderatorId String?
  appealStatus ModerationAppealStatus @default(NONE)
  metadata  Json     @default("{}")
  context   Json     @default("{}")
  createdAt DateTime @default(now())
  createdById String?
  updatedById String?
  updatedAt DateTime  @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  moderator User?   @relation("MuteModerator", fields: [moderatorId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("MuteCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("MuteUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_mute_tenant")
  @@index([guildId], map: "idx_mute_guild")
  @@index([moderatorId], map: "idx_mute_moderator")
  @@index([appealStatus], map: "idx_mute_appeal_status")
  @@map("mute")
}

model Newsletter {
  id           String   @id @default(uuid())
  email        String
  name         String?
  subscribedAt DateTime @default(now())
  tenantId     String?
  status       SubscriptionStatus @default(ACTIVE)
  source       String?  @default("unknown")
  unsubscribedAt DateTime?
  lastEmailedAt DateTime?
  metadata     Json     @default("{}")
  updatedAt    DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@unique([tenantId, email], map: "uq_newsletter_tenant_email")
  @@index([tenantId], map: "idx_newsletter_tenant")
  @@index([status], map: "idx_newsletter_status")
  @@map("newsletter")
}

model Order {
  id             String      @id @default(uuid())
  customerId     String
  products       Json        @default("[]")
  totalAmount    Decimal     @db.Decimal(18, 2)
  status         OrderStatus @default(PENDING)
  trackingNumber String?
  tenantId       String?
  isArchived     Boolean     @default(false)
  deletedAt      DateTime?
  metadata       Json        @default("{}")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]
  metadataRecords OrderMetadata[]

  @@index([customerId])
  @@index([tenantId])
  @@index([status])
  @@index([isArchived])
  @@index([createdAt])
  @@map("order")
}

model OrderMetadata {
  id       String   @id @default(uuid())
  orderId  String
  key      String
  value    Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_order_metadata_order")
  @@unique([orderId, key], map: "uq_order_metadata_key")
  @@map("order_metadata")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_order_item_order")
  @@index([productId], map: "idx_order_item_product")
  @@unique([orderId, productId], map: "uq_order_item_product")
  @@map("order_item")
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  foundedDate DateTime @default(now())
  members     Json     @default("[]")
  tenantId    String?
  isArchived  Boolean  @default(false)
  deletedAt   DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  memberRecords OrganizationMember[]
  metadataRecords OrganizationMetadata[]

  @@index([tenantId])
  @@index([isArchived])
  @@unique([tenantId, name], map: "uq_organization_tenant_name")
  @@index([createdAt])
  @@map("organization")
}

model OrganizationMetadata {
  id             String   @id @default(uuid())
  organizationId String
  key            String
  value          Json     @default("null")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "idx_organization_metadata_parent")
  @@unique([organizationId, key], map: "uq_organization_metadata_key")
  @@map("organization_metadata")
}

model OrganizationMember {
  id           String   @id @default(uuid())
  organizationId String
  userId       String
  role         String?  @default("member")
  joinedAt     DateTime @default(now())
  leftAt       DateTime?
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  historyRecords OrganizationMemberHistory[]

  @@index([organizationId], map: "idx_org_member_org")
  @@index([userId], map: "idx_org_member_user")
  @@unique([organizationId, userId], map: "uq_org_member_user")
  @@map("organization_member")
}

model OrganizationMemberHistory {
  id                String              @id @default(uuid())
  organizationMemberId String
  eventType         MembershipEventType @default(ADDED)
  actorId           String?
  description       String?             @db.Text
  occurredAt        DateTime            @default(now())
  createdAt         DateTime            @default(now())

  organizationMember OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)
  actor              User?              @relation("OrganizationMemberHistoryActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([organizationMemberId], map: "idx_org_member_history_parent")
  @@index([actorId], map: "idx_org_member_history_actor")
  @@map("organization_member_history")
}

model Payment {
  id                String        @id @default(uuid())
  userId            String
  amount            Decimal       @db.Decimal(18, 2)
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  transactionId     String?
  tenantId          String?
  billingProfileId  String?
  invoiceId         String?
  processedAt       DateTime?
  isArchived        Boolean       @default(false)
  deletedAt         DateTime?
  metadata          Json          @default("{}")
  createdDate       DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant         Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  billingProfile BillingProfile? @relation(fields: [billingProfileId], references: [id], onDelete: SetNull)
  invoice        Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  metadataRecords PaymentMetadata[]
  reconciliationRecords PaymentReconciliation[]
  receipts       Receipt[]

  @@index([userId])
  @@index([tenantId])
  @@index([billingProfileId], map: "idx_payment_billing_profile")
  @@index([invoiceId], map: "idx_payment_invoice")
  @@index([status])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, transactionId], map: "uq_payment_tenant_transaction")
  @@map("payment")
}

model PaymentMetadata {
  id        String   @id @default(uuid())
  paymentId String
  key       String
  value     Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([paymentId], map: "idx_payment_metadata_payment")
  @@unique([paymentId, key], map: "uq_payment_metadata_key")
  @@map("payment_metadata")
}

model BillingProfile {
  id                     String         @id @default(uuid())
  tenantId               String?
  userId                 String?
  companyName            String?
  legalName              String?
  taxId                  String?
  address                Json           @default("{}")
  billingEmail           String?
  phoneNumber            String?
  currency               String         @default("USD")
  preferredPaymentMethod PaymentMethod?
  metadata               Json           @default("{}")
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  tenant        Tenant?        @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  paymentMethods BillingProfilePaymentMethod[]
  contacts       BillingContact[]
  subscriptions  Subscription[]
  invoices       Invoice[]
  taxExemptions  TaxExemption[]

  @@index([tenantId], map: "idx_billing_profile_tenant")
  @@index([userId], map: "idx_billing_profile_user")
  @@unique([tenantId, userId], map: "uq_billing_profile_owner")
  @@map("billing_profile")
}

model BillingProfilePaymentMethod {
  id                String         @id @default(uuid())
  billingProfileId  String
  type              PaymentMethod
  gatewayProvider   GatewayProvider?
  externalReference String?
  displayName       String?
  isDefault         Boolean        @default(false)
  details           Json           @default("{}")
  metadata          Json           @default("{}")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  billingProfile BillingProfile @relation(fields: [billingProfileId], references: [id], onDelete: Cascade)

  @@index([billingProfileId], map: "idx_billing_profile_payment_profile")
  @@index([isDefault], map: "idx_billing_profile_payment_default")
  @@map("billing_profile_payment_method")
}

model BillingContact {
  id               String             @id @default(uuid())
  billingProfileId String
  type             BillingContactType @default(PRIMARY)
  name             String
  email            String?
  phone            String?
  notes            String?            @db.Text
  metadata         Json               @default("{}")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  billingProfile BillingProfile @relation(fields: [billingProfileId], references: [id], onDelete: Cascade)

  @@index([billingProfileId], map: "idx_billing_contact_profile")
  @@index([type], map: "idx_billing_contact_type")
  @@map("billing_contact")
}

model SubscriptionPlan {
  id               String           @id @default(uuid())
  tenantId         String?
  name             String
  tier             SubscriptionTier @default(STANDARD)
  description      String?          @db.Text
  baseCurrency     String           @default("USD")
  basePrice        Decimal          @db.Decimal(18, 2) @default(0)
  baseBillingCycle BillingCycle     @default(MONTHLY)
  trialPeriodDays  Int              @default(0)
  isActive         Boolean          @default(true)
  maxMembers       Int?
  metadata         Json             @default("{}")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  tenant        Tenant?                  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  features      SubscriptionPlanFeature[]
  prices        SubscriptionPlanPrice[]
  subscriptions Subscription[]
  addons        SubscriptionAddon[]

  @@index([tenantId], map: "idx_subscription_plan_tenant")
  @@index([tier], map: "idx_subscription_plan_tier")
  @@index([isActive], map: "idx_subscription_plan_active")
  @@unique([tenantId, name], map: "uq_subscription_plan_name")
  @@map("subscription_plan")
}

model SubscriptionPlanFeature {
  id               String              @id @default(uuid())
  planId           String
  key              String
  label            String
  description      String?             @db.Text
  limitValue       Int?
  usageAggregation UsageAggregation    @default(COUNT)
  metadata         Json                @default("{}")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  plan        SubscriptionPlan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  usageLimits SubscriptionUsageLimit[]
  usageRecords SubscriptionUsage[]

  @@index([planId], map: "idx_subscription_plan_feature_plan")
  @@unique([planId, key], map: "uq_subscription_plan_feature_key")
  @@map("subscription_plan_feature")
}

model SubscriptionPlanPrice {
  id           String        @id @default(uuid())
  planId       String
  billingCycle BillingCycle
  amount       Decimal       @db.Decimal(18, 2) @default(0)
  currency     String        @default("USD")
  isPrimary    Boolean       @default(false)
  metadata     Json          @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  plan SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId], map: "idx_subscription_plan_price_plan")
  @@index([billingCycle], map: "idx_subscription_plan_price_cycle")
  @@unique([planId, billingCycle], map: "uq_subscription_plan_price_cycle")
  @@map("subscription_plan_price")
}

model SubscriptionAddon {
  id           String       @id @default(uuid())
  planId       String?
  tenantId     String?
  name         String
  description  String?      @db.Text
  amount       Decimal      @db.Decimal(18, 2) @default(0)
  currency     String       @default("USD")
  billingCycle BillingCycle @default(MONTHLY)
  isRecurring  Boolean      @default(true)
  isActive     Boolean      @default(true)
  metadata     Json         @default("{}")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  plan        SubscriptionPlan? @relation(fields: [planId], references: [id], onDelete: SetNull)
  tenant      Tenant?           @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  assignments SubscriptionAddonAssignment[]

  @@index([planId], map: "idx_subscription_addon_plan")
  @@index([tenantId], map: "idx_subscription_addon_tenant")
  @@index([isActive], map: "idx_subscription_addon_active")
  @@unique([tenantId, name], map: "uq_subscription_addon_tenant_name")
  @@map("subscription_addon")
}

model SubscriptionAddonAssignment {
  id             String             @id @default(uuid())
  subscriptionId String
  addonId        String
  quantity       Int                @default(1)
  startedAt      DateTime           @default(now())
  endedAt        DateTime?
  metadata       Json               @default("{}")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  subscription Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  addon        SubscriptionAddon @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@index([subscriptionId], map: "idx_subscription_addon_assignment_subscription")
  @@index([addonId], map: "idx_subscription_addon_assignment_addon")
  @@unique([subscriptionId, addonId], map: "uq_subscription_addon_assignment_unique")
  @@map("subscription_addon_assignment")
}

model Subscription {
  id                  String             @id @default(uuid())
  tenantId            String?
  userId              String?
  billingProfileId    String?
  planId              String
  status              SubscriptionStatus @default(TRIALING)
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  cancelAtPeriodEnd   Boolean            @default(false)
  cancelledAt         DateTime?
  trialEndsAt         DateTime?
  renewalBillingCycle BillingCycle       @default(MONTHLY)
  renewalAmount       Decimal?           @db.Decimal(18, 2)
  currency            String             @default("USD")
  usageSummary        Json               @default("{}")
  metadata            Json               @default("{}")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  tenant         Tenant?          @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  billingProfile BillingProfile?  @relation(fields: [billingProfileId], references: [id], onDelete: SetNull)
  plan           SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  cycles         SubscriptionCycle[]
  usageLimits    SubscriptionUsageLimit[]
  usageRecords   SubscriptionUsage[]
  usageSnapshots SubscriptionUsageSnapshot[]
  invoices       Invoice[]
  addonAssignments SubscriptionAddonAssignment[]

  @@index([tenantId], map: "idx_subscription_tenant")
  @@index([userId], map: "idx_subscription_user")
  @@index([planId], map: "idx_subscription_plan")
  @@index([billingProfileId], map: "idx_subscription_billing_profile")
  @@index([status], map: "idx_subscription_status")
  @@map("subscription")
}

model SubscriptionCycle {
  id             String                  @id @default(uuid())
  subscriptionId String
  cycleNumber    Int                     @default(1)
  billingCycle   BillingCycle
  periodStart    DateTime
  periodEnd      DateTime
  status         SubscriptionCycleStatus @default(PENDING)
  invoiceId      String?
  metadata       Json                    @default("{}")
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  subscription Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  invoice      Invoice?          @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  usageSnapshots SubscriptionUsageSnapshot[]
  usageRecords   SubscriptionUsage[]

  @@index([subscriptionId], map: "idx_subscription_cycle_subscription")
  @@index([invoiceId], map: "idx_subscription_cycle_invoice")
  @@unique([subscriptionId, cycleNumber], map: "uq_subscription_cycle_number")
  @@map("subscription_cycle")
}

model SubscriptionUsageLimit {
  id             String           @id @default(uuid())
  subscriptionId String?
  planFeatureId  String
  limitValue     Decimal?         @db.Decimal(18, 4)
  aggregation    UsageAggregation @default(COUNT)
  effectiveFrom  DateTime?
  effectiveUntil DateTime?
  metadata       Json             @default("{}")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  subscription Subscription?          @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  planFeature SubscriptionPlanFeature @relation(fields: [planFeatureId], references: [id], onDelete: Cascade)

  @@index([subscriptionId], map: "idx_subscription_usage_limit_subscription")
  @@index([planFeatureId], map: "idx_subscription_usage_limit_feature")
  @@map("subscription_usage_limit")
}

model SubscriptionUsage {
  id             String           @id @default(uuid())
  subscriptionId String
  planFeatureId  String
  cycleId        String?
  aggregation    UsageAggregation @default(COUNT)
  quantity       Decimal          @db.Decimal(18, 4) @default(0)
  measuredAt     DateTime         @default(now())
  metadata       Json             @default("{}")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  subscription Subscription        @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  planFeature  SubscriptionPlanFeature @relation(fields: [planFeatureId], references: [id], onDelete: Cascade)
  cycle        SubscriptionCycle?  @relation(fields: [cycleId], references: [id], onDelete: SetNull)

  @@index([subscriptionId], map: "idx_subscription_usage_subscription")
  @@index([planFeatureId], map: "idx_subscription_usage_feature")
  @@index([cycleId], map: "idx_subscription_usage_cycle")
  @@map("subscription_usage")
}

model SubscriptionUsageSnapshot {
  id             String   @id @default(uuid())
  subscriptionId String
  cycleId        String?
  snapshotAt     DateTime @default(now())
  usageSummary   Json     @default("{}")
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  subscription Subscription       @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  cycle        SubscriptionCycle? @relation(fields: [cycleId], references: [id], onDelete: SetNull)

  @@index([subscriptionId], map: "idx_subscription_usage_snapshot_subscription")
  @@index([cycleId], map: "idx_subscription_usage_snapshot_cycle")
  @@map("subscription_usage_snapshot")
}

model Invoice {
  id               String                @id @default(uuid())
  tenantId         String?
  billingProfileId String?
  subscriptionId   String?
  cycleId          String?
  number           String?
  status           InvoiceStatus         @default(DRAFT)
  issuedAt         DateTime?
  dueDate          DateTime?
  paidAt           DateTime?
  currency         String                @default("USD")
  subtotal         Decimal               @db.Decimal(18, 2) @default(0)
  taxTotal         Decimal               @db.Decimal(18, 2) @default(0)
  discountTotal    Decimal               @db.Decimal(18, 2) @default(0)
  total            Decimal               @db.Decimal(18, 2) @default(0)
  deliveryMethod   InvoiceDeliveryMethod @default(EMAIL)
  notes            String?               @db.Text
  metadata         Json                  @default("{}")
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  tenant         Tenant?          @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  billingProfile BillingProfile?  @relation(fields: [billingProfileId], references: [id], onDelete: SetNull)
  subscription   Subscription?    @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  cycle          SubscriptionCycle? @relation(fields: [cycleId], references: [id], onDelete: SetNull)
  lineItems      InvoiceLineItem[]
  historyRecords InvoiceHistory[]
  deliveryLogs   InvoiceDeliveryLog[]
  taxCalculations TaxCalculation[]
  receipts       Receipt[]
  payments       Payment[]
  reconciliations PaymentReconciliation[]

  @@index([tenantId], map: "idx_invoice_tenant")
  @@index([billingProfileId], map: "idx_invoice_billing_profile")
  @@index([subscriptionId], map: "idx_invoice_subscription")
  @@index([cycleId], map: "idx_invoice_cycle")
  @@index([status], map: "idx_invoice_status")
  @@unique([tenantId, number], map: "uq_invoice_number")
  @@map("invoice")
}

model InvoiceLineItem {
  id          String           @id @default(uuid())
  invoiceId   String
  lineType    InvoiceLineType  @default(SERVICE)
  name        String
  description String?          @db.Text
  quantity    Int              @default(1)
  unitAmount  Decimal          @db.Decimal(18, 2) @default(0)
  amount      Decimal          @db.Decimal(18, 2) @default(0)
  taxRateId   String?
  metadata    Json             @default("{}")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  invoice  Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  taxRate  TaxRate? @relation(fields: [taxRateId], references: [id], onDelete: SetNull)
  taxCalculations TaxCalculation[]

  @@index([invoiceId], map: "idx_invoice_line_item_invoice")
  @@index([taxRateId], map: "idx_invoice_line_item_tax_rate")
  @@map("invoice_line_item")
}

model InvoiceHistory {
  id          String        @id @default(uuid())
  invoiceId   String
  status      InvoiceStatus
  notes       String?       @db.Text
  createdById String?
  metadata    Json          @default("{}")
  createdAt   DateTime      @default(now())

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdBy User?   @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([invoiceId], map: "idx_invoice_history_invoice")
  @@index([createdById], map: "idx_invoice_history_actor")
  @@map("invoice_history")
}

model InvoiceDeliveryLog {
  id        String                @id @default(uuid())
  invoiceId String
  method    InvoiceDeliveryMethod
  recipient String
  status    String?               @default("pending")
  response  Json?                 @default("null")
  sentAt    DateTime              @default(now())
  metadata  Json                  @default("{}")
  createdAt DateTime              @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId], map: "idx_invoice_delivery_invoice")
  @@index([method], map: "idx_invoice_delivery_method")
  @@map("invoice_delivery_log")
}

model TaxJurisdiction {
  id        String              @id @default(uuid())
  tenantId  String?
  name      String
  code      String
  type      TaxJurisdictionType @default(COUNTRY)
  metadata  Json                @default("{}")
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  tenant      Tenant?      @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  rates       TaxRate[]
  taxRules    TaxRule[]
  exemptions  TaxExemption[]

  @@index([tenantId], map: "idx_tax_jurisdiction_tenant")
  @@unique([tenantId, code], map: "uq_tax_jurisdiction_code")
  @@map("tax_jurisdiction")
}

model TaxRate {
  id             String      @id @default(uuid())
  jurisdictionId String
  name           String
  rate           Decimal     @db.Decimal(6, 4) @default(0)
  taxType        TaxType     @default(SALES)
  isCompound     Boolean     @default(false)
  effectiveFrom  DateTime?
  effectiveUntil DateTime?
  metadata       Json        @default("{}")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  jurisdiction TaxJurisdiction @relation(fields: [jurisdictionId], references: [id], onDelete: Cascade)
  lineItems    InvoiceLineItem[]
  calculations TaxCalculation[]
  taxRules     TaxRule[]

  @@index([jurisdictionId], map: "idx_tax_rate_jurisdiction")
  @@index([taxType], map: "idx_tax_rate_type")
  @@map("tax_rate")
}

model TaxRule {
  id              String             @id @default(uuid())
  tenantId        String?
  jurisdictionId  String?
  taxRateId       String?
  appliesTo       InvoiceLineType    @default(PRODUCT)
  priority        Int                @default(0)
  conditions      Json               @default("{}")
  metadata        Json               @default("{}")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  tenant       Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  jurisdiction TaxJurisdiction? @relation(fields: [jurisdictionId], references: [id], onDelete: SetNull)
  taxRate      TaxRate?         @relation(fields: [taxRateId], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_tax_rule_tenant")
  @@index([jurisdictionId], map: "idx_tax_rule_jurisdiction")
  @@index([taxRateId], map: "idx_tax_rule_rate")
  @@map("tax_rule")
}

model TaxCalculation {
  id            String           @id @default(uuid())
  invoiceId     String
  taxRateId     String
  lineItemId    String?
  taxableAmount Decimal          @db.Decimal(18, 2) @default(0)
  taxAmount     Decimal          @db.Decimal(18, 2) @default(0)
  metadata      Json             @default("{}")
  createdAt     DateTime         @default(now())

  invoice  Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  taxRate  TaxRate        @relation(fields: [taxRateId], references: [id], onDelete: Cascade)
  lineItem InvoiceLineItem? @relation(fields: [lineItemId], references: [id], onDelete: SetNull)

  @@index([invoiceId], map: "idx_tax_calculation_invoice")
  @@index([taxRateId], map: "idx_tax_calculation_rate")
  @@index([lineItemId], map: "idx_tax_calculation_line_item")
  @@map("tax_calculation")
}

model TaxExemption {
  id               String   @id @default(uuid())
  billingProfileId String
  jurisdictionId   String?
  exemptionNumber  String
  description      String?  @db.Text
  issuedAt         DateTime?
  expiresAt        DateTime?
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  billingProfile BillingProfile  @relation(fields: [billingProfileId], references: [id], onDelete: Cascade)
  jurisdiction   TaxJurisdiction? @relation(fields: [jurisdictionId], references: [id], onDelete: SetNull)

  @@index([billingProfileId], map: "idx_tax_exemption_profile")
  @@index([jurisdictionId], map: "idx_tax_exemption_jurisdiction")
  @@unique([billingProfileId, exemptionNumber], map: "uq_tax_exemption_number")
  @@map("tax_exemption")
}

model PaymentGateway {
  id            String          @id @default(uuid())
  tenantId      String?
  provider      GatewayProvider
  name          String
  isPrimary     Boolean         @default(false)
  isActive      Boolean         @default(true)
  configuration Json            @default("{}")
  metadata      Json            @default("{}")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  tenant         Tenant?                   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  credentials    PaymentGatewayCredential[]
  webhooks       PaymentGatewayWebhook[]
  payouts        PaymentPayout[]
  reconciliations PaymentReconciliation[]

  @@index([tenantId], map: "idx_payment_gateway_tenant")
  @@index([provider], map: "idx_payment_gateway_provider")
  @@index([isActive], map: "idx_payment_gateway_active")
  @@map("payment_gateway")
}

model PaymentGatewayCredential {
  id         String   @id @default(uuid())
  gatewayId  String
  key        String
  value      Json     @default("null")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rotatedAt  DateTime?
  metadata   Json     @default("{}")

  gateway PaymentGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)

  @@index([gatewayId], map: "idx_payment_gateway_credential_gateway")
  @@unique([gatewayId, key], map: "uq_payment_gateway_credential_key")
  @@map("payment_gateway_credential")
}

model PaymentGatewayWebhook {
  id          String   @id @default(uuid())
  gatewayId   String
  eventType   String
  url         String
  secret      String?
  lastCalledAt DateTime?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  gateway PaymentGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)

  @@index([gatewayId], map: "idx_payment_gateway_webhook_gateway")
  @@index([eventType], map: "idx_payment_gateway_webhook_event")
  @@map("payment_gateway_webhook")
}

model PaymentPayout {
  id               String        @id @default(uuid())
  gatewayId        String?
  tenantId         String?
  status           PaymentStatus @default(PENDING)
  amount           Decimal       @db.Decimal(18, 2) @default(0)
  currency         String        @default("USD")
  externalReference String?
  initiatedAt      DateTime      @default(now())
  completedAt      DateTime?
  metadata         Json          @default("{}")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  gateway PaymentGateway? @relation(fields: [gatewayId], references: [id], onDelete: SetNull)
  tenant  Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([gatewayId], map: "idx_payment_payout_gateway")
  @@index([tenantId], map: "idx_payment_payout_tenant")
  @@index([status], map: "idx_payment_payout_status")
  @@map("payment_payout")
}

model PaymentReconciliation {
  id               String        @id @default(uuid())
  gatewayId        String?
  paymentId        String?
  invoiceId        String?
  status           PaymentStatus @default(PENDING)
  externalReference String?
  reconciledAt     DateTime?
  metadata         Json          @default("{}")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  gateway PaymentGateway? @relation(fields: [gatewayId], references: [id], onDelete: SetNull)
  payment Payment?         @relation(fields: [paymentId], references: [id], onDelete: SetNull)
  invoice Invoice?         @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  @@index([gatewayId], map: "idx_payment_reconciliation_gateway")
  @@index([paymentId], map: "idx_payment_reconciliation_payment")
  @@index([invoiceId], map: "idx_payment_reconciliation_invoice")
  @@map("payment_reconciliation")
}

model Receipt {
  id        String   @id @default(uuid())
  invoiceId String
  paymentId String?
  number    String?
  issuedAt  DateTime @default(now())
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  payment Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@index([invoiceId], map: "idx_receipt_invoice")
  @@index([paymentId], map: "idx_receipt_payment")
  @@unique([invoiceId, number], map: "uq_receipt_number")
  @@map("receipt")
}

model FinancialReport {
  id             String          @id @default(uuid())
  tenantId       String?
  name           String
  description    String?         @db.Text
  frequency      ReportFrequency @default(MONTHLY)
  filters        Json            @default("{}")
  generatedAt    DateTime?
  generatedById  String?
  output         Json?           @default("null")
  metadata       Json            @default("{}")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  tenant      Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  generatedBy User?   @relation("FinancialReportGeneratedBy", fields: [generatedById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_financial_report_tenant")
  @@index([generatedById], map: "idx_financial_report_generated_by")
  @@map("financial_report")
}

model FinancialSnapshot {
  id            String   @id @default(uuid())
  tenantId      String?
  periodStart   DateTime
  periodEnd     DateTime
  totalRevenue  Decimal  @db.Decimal(18, 2) @default(0)
  totalTax      Decimal  @db.Decimal(18, 2) @default(0)
  totalDiscounts Decimal @db.Decimal(18, 2) @default(0)
  currency      String   @default("USD")
  metrics       Json     @default("{}")
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_financial_snapshot_tenant")
  @@index([periodStart], map: "idx_financial_snapshot_period_start")
  @@map("financial_snapshot")
}

model AnalyticsSession {
  id        String   @id @default(uuid())
  tenantId  String?
  userId    String?
  guildId   String?
  startedAt DateTime @default(now())
  endedAt   DateTime?
  context   Json     @default("{}")
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  events AnalyticsEvent[]

  @@index([tenantId], map: "idx_analytics_session_tenant")
  @@index([userId], map: "idx_analytics_session_user")
  @@map("analytics_session")
}

model AnalyticsEvent {
  id        String                 @id @default(uuid())
  tenantId  String?
  sessionId String?
  userId    String?
  guildId   String?
  category  AnalyticsEventCategory @default(SYSTEM)
  action    String
  label     String?
  value     Decimal?               @db.Decimal(18, 4)
  context   Json                   @default("{}")
  metadata  Json                   @default("{}")
  occurredAt DateTime              @default(now())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  tenant  Tenant?          @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  session AnalyticsSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  user    User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  properties AnalyticsEventProperty[]

  @@index([tenantId], map: "idx_analytics_event_tenant")
  @@index([sessionId], map: "idx_analytics_event_session")
  @@index([userId], map: "idx_analytics_event_user")
  @@index([category], map: "idx_analytics_event_category")
  @@map("analytics_event")
}

model AnalyticsEventProperty {
  id        String   @id @default(uuid())
  eventId   String
  key       String
  value     Json     @default("null")
  createdAt DateTime @default(now())

  event AnalyticsEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId], map: "idx_analytics_event_property_event")
  @@unique([eventId, key], map: "uq_analytics_event_property_key")
  @@map("analytics_event_property")
}

model AnalyticsDashboardWidget {
  id                String   @id @default(uuid())
  tenantId          String?
  name              String
  description       String?  @db.Text
  visualizationType String   @default("chart")
  position          Int      @default(0)
  isVisible         Boolean  @default(true)
  config            Json     @default("{}")
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_analytics_dashboard_widget_tenant")
  @@index([isVisible], map: "idx_analytics_dashboard_widget_visible")
  @@map("analytics_dashboard_widget")
}

model AnalyticsReport {
  id          String          @id @default(uuid())
  tenantId    String?
  name        String
  description String?         @db.Text
  frequency   ReportFrequency @default(MONTHLY)
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  query       Json            @default("{}")
  isActive    Boolean         @default(true)
  metadata    Json            @default("{}")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  tenant    Tenant?                @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  schedules AnalyticsReportSchedule[]

  @@index([tenantId], map: "idx_analytics_report_tenant")
  @@index([isActive], map: "idx_analytics_report_active")
  @@map("analytics_report")
}

model AnalyticsReportSchedule {
  id             String                @id @default(uuid())
  reportId       String
  deliveryMethod InvoiceDeliveryMethod @default(EMAIL)
  target         String
  lastDeliveredAt DateTime?
  metadata       Json                  @default("{}")
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  report AnalyticsReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId], map: "idx_analytics_report_schedule_report")
  @@map("analytics_report_schedule")
}

model AnalyticsGoal {
  id           String   @id @default(uuid())
  tenantId     String?
  name         String
  description  String?  @db.Text
  targetValue  Decimal  @db.Decimal(18, 4) @default(0)
  currentValue Decimal  @db.Decimal(18, 4) @default(0)
  status       String   @default("active")
  metrics      Json     @default("{}")
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant      Tenant?              @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  funnelSteps AnalyticsFunnelStep[]

  @@index([tenantId], map: "idx_analytics_goal_tenant")
  @@map("analytics_goal")
}

model AnalyticsFunnelStep {
  id           String   @id @default(uuid())
  goalId       String
  order        Int      @default(0)
  label        String
  targetValue  Decimal  @db.Decimal(18, 4) @default(0)
  currentValue Decimal  @db.Decimal(18, 4) @default(0)
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  goal AnalyticsGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId], map: "idx_analytics_funnel_step_goal")
  @@unique([goalId, order], map: "uq_analytics_funnel_step_order")
  @@map("analytics_funnel_step")
}

model Platform {
  id          String    @id @default(uuid())
  picture     String?
  title       String
  description String?
  releaseDate DateTime?
  manufacturer String?
  website     String?
  tenantId    String?
  isActive    Boolean   @default(true)
  metadata    Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_platform_tenant")
  @@index([isActive], map: "idx_platform_active")
  @@map("platform")
}

model Prefix {
  id        String   @id @default(uuid())
  guildId   String   @unique
  prefix    String
  tenantId  String?
  description String? @db.Text
  isDefault Boolean  @default(false)
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("PrefixCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("PrefixUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_prefix_tenant")
  @@index([isDefault], map: "idx_prefix_default")
  @@map("prefix")
}

model Product {
  id                String   @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String   @default("") @db.Text
  price             Decimal  @db.Decimal(18, 2)
  category          String   @default("")
  stock             Int      @default(0)
  sku               String?
  currency          String   @default("USD")
  tenantId          String?
  isArchived        Boolean  @default(false)
  deletedAt         DateTime?
  metadata          Json     @default("{}")
  createdDate       DateTime @default(now())
  updatedDate       DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([category])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, sku], map: "uq_product_tenant_sku")
  @@map("product")
}

model Project {
  id                String        @id @default(uuid())
  picture           String?
  title             String
  shortDescription  String
  detailDescription String        @default("") @db.Text
  status            ProjectStatus @default(NOT_STARTED)
  startDate         DateTime      @default(now())
  endDate           DateTime?
  members           Json          @default("[]")
  tags              Json          @default("[]")
  tenantId          String?
  isArchived        Boolean       @default(false)
  deletedAt         DateTime?
  metadata          Json          @default("{}")
  createdDate       DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  blogs    Blog[]
  bugs     Bug[]
  features Feature[]
  issues   Issue[]
  stories  Story[]
  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  memberRecords ProjectMember[]
  tagRecords    ProjectTag[]
  metadataRecords ProjectMetadata[]

  @@index([status])
  @@index([tenantId])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, title], map: "uq_project_tenant_title")
  @@map("project")
}

model ProjectMetadata {
  id        String   @id @default(uuid())
  projectId String
  key       String
  value     Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "idx_project_metadata_project")
  @@unique([projectId, key], map: "uq_project_metadata_key")
  @@map("project_metadata")
}

model ProjectMember {
  id         String   @id @default(uuid())
  projectId  String
  userId     String
  role       String?  @default("contributor")
  joinedAt   DateTime @default(now())
  leftAt     DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  historyRecords ProjectMemberHistory[]

  @@index([projectId], map: "idx_project_member_project")
  @@index([userId], map: "idx_project_member_user")
  @@unique([projectId, userId], map: "uq_project_member_user")
  @@map("project_member")
}

model ProjectMemberHistory {
  id            String              @id @default(uuid())
  projectMemberId String
  eventType     MembershipEventType @default(ADDED)
  actorId       String?
  description   String?             @db.Text
  occurredAt    DateTime            @default(now())
  createdAt     DateTime            @default(now())

  projectMember ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)
  actor         User?         @relation("ProjectMemberHistoryActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([projectMemberId], map: "idx_project_member_history_parent")
  @@index([actorId], map: "idx_project_member_history_actor")
  @@map("project_member_history")
}

model ProjectTag {
  id        String @id @default(uuid())
  projectId String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "idx_project_tag_project")
  @@index([tagId], map: "idx_project_tag_tag")
  @@unique([projectId, tagId], map: "uq_project_tag_tag")
  @@map("project_tag")
}

model Report {
  id             String        @id @default(uuid())
  userId         String
  guildId        String
  reportedUserId String
  reason         String        @db.Text
  tenantId       String?
  status         ReportStatus  @default(OPEN)
  assignedToId   String?
  resolvedAt     DateTime?
  metadata       Json          @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  updatedById    String?

  tenant     Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  assignedTo User?   @relation("ReportAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  updatedBy  User?   @relation("ReportUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([guildId])
  @@index([tenantId], map: "idx_report_tenant")
  @@index([status], map: "idx_report_status")
  @@index([assignedToId], map: "idx_report_assigned")
  @@index([resolvedAt], map: "idx_report_resolved_at")
  @@index([updatedById], map: "idx_report_updated_by")
  @@index([createdAt])
  @@map("report")
}

model Return {
  id           String       @id @default(uuid())
  orderId      String
  returnNumber String       @unique
  returnDate   DateTime     @default(now())
  reason       String
  status       ReturnStatus @default(REQUESTED)
  items        Json         @default("[]")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  order CustomerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  itemRecords ReturnItem[]

  @@index([orderId])
  @@index([status])
  @@index([createdAt])
  @@map("return")
}

model ReturnItem {
  id        String   @id @default(uuid())
  returnId  String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  returnRecord Return        @relation(fields: [returnId], references: [id], onDelete: Cascade)
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([returnId], map: "idx_return_item_return")
  @@index([productId], map: "idx_return_item_product")
  @@unique([returnId, productId], map: "uq_return_item_product")
  @@map("return_item")
}

model Role {
  id          String   @id @default(uuid())
  tenantId    String?
  name        String
  displayName String
  color       String   @default("#000000")
  description String?
  permissions Json     @default("[]")
  isDefault   Boolean  @default(false)
  isSystem    Boolean  @default(false)
  metadata    Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([tenantId, name], map: "uq_role_tenant_name")
  @@index([tenantId], map: "idx_role_tenant")
  @@index([isDefault], map: "idx_role_default")
  @@map("role")
}

model Roleplay {
  id               String   @id @default(uuid())
  userId           String   @unique
  characterName    String
  characterLevel   Int      @default(1)
  experiencePoints Int      @default(0)
  lastRoleplayDate DateTime @default(now())
  tenantId         String?
  guildId          String?
  status           RoleplayStatus @default(ACTIVE)
  characterClass   String?        @default("Adventurer")
  faction          String?
  lastSessionAt    DateTime?
  metadata         Json           @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_roleplay_tenant")
  @@index([status], map: "idx_roleplay_status")
  @@index([guildId], map: "idx_roleplay_guild")
  @@map("roleplay")
}

model Share {
  id        String        @id @default(uuid())
  userId    String
  blogId    String
  platform  SharePlatform
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([blogId])
  @@index([createdAt])
  @@map("share")
}

model Slowmode {
  id        String   @id @default(uuid())
  channelId String   @unique
  duration  Int
  reason    String?  @db.Text
  tenantId  String?
  isActive  Boolean  @default(true)
  expiresAt DateTime?
  setBy     String
  setAt     DateTime @default(now())
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("SlowmodeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("SlowmodeUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_slowmode_tenant")
  @@index([isActive], map: "idx_slowmode_active")
  @@index([expiresAt], map: "idx_slowmode_expires")
  @@map("slowmode")
}

model Story {
  id          String        @id @default(uuid())
  title       String
  description String        @db.Text
  status      StoryStatus   @default(BACKLOG)
  priority    PriorityLevel @default(MEDIUM)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("story")
}

model Subscriber {
  id             String              @id @default(uuid())
  email          String
  name           String?
  tenantId       String?
  status         SubscriptionStatus  @default(ACTIVE)
  source         String?             @default("unknown")
  subscribedAt   DateTime            @default(now())
  unsubscribedAt DateTime?
  lastEmailedAt  DateTime?
  metadata       Json                @default("{}")
  createdById    String?
  updatedById    String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("SubscriberCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("SubscriberUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([tenantId, email], map: "uq_subscriber_tenant_email")
  @@index([tenantId], map: "idx_subscriber_tenant")
  @@index([status], map: "idx_subscriber_status")
  @@map("subscriber")
}

model Tag {
  id          String   @id @default(uuid())
  tenantId    String?
  name        String
  slug        String
  description String   @default("")
  color       String?  @default("#000000")
  isActive    Boolean  @default(true)
  metadata    Json     @default("{}")
  createdById String?
  updatedById String?
  createdDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("TagCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("TagUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([tenantId, name], map: "uq_tag_tenant_name")
  @@unique([tenantId, slug], map: "uq_tag_tenant_slug")
  @@index([tenantId], map: "idx_tag_tenant")
  @@index([isActive], map: "idx_tag_active")
  @@map("tag")
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String       @default("") @db.Text
  category     TaskCategory @default(OTHER)
  status       TaskStatus   @default(PENDING)
  assignedToId String
  teamId       String
  dueDate      DateTime?
  tenantId     String?
  priority     PriorityLevel @default(MEDIUM)
  estimateHours Decimal?     @db.Decimal(10, 2)
  isArchived   Boolean       @default(false)
  deletedAt    DateTime?
  metadata     Json          @default("{}")
  createdDate  DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  assignedTo User @relation("TaskAssignee", fields: [assignedToId], references: [id], onDelete: Cascade)
  team       Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tenant     Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([assignedToId])
  @@index([teamId])
  @@index([tenantId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([createdAt])
  @@index([isArchived])
  @@unique([teamId, title, assignedToId], map: "uq_task_team_title_assignee")
  @@map("task")
}

model Team {
  id          String     @id @default(uuid())
  name        String
  description String     @default("") @db.Text
  createdDate DateTime   @default(now())
  members     Json       @default("[]")
  status      TeamStatus @default(ACTIVE)
  type        TeamType   @default(OTHER)
  logo        String     @default("default-team-logo.png")
  ownerId     String?
  tenantId    String?
  isArchived  Boolean    @default(false)
  deletedAt   DateTime?
  metadata    Json       @default("{}")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  owner User? @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  tasks  Task[]
  memberRecords TeamMember[]
  metadataRecords TeamMetadata[]

  @@index([tenantId])
  @@index([ownerId])
  @@index([isArchived])
  @@index([createdDate])
  @@unique([tenantId, name], map: "uq_team_tenant_name")
  @@map("team")
}

model TeamMetadata {
  id      String   @id @default(uuid())
  teamId  String
  key     String
  value   Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId], map: "idx_team_metadata_team")
  @@unique([teamId, key], map: "uq_team_metadata_key")
  @@map("team_metadata")
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      String?  @default("member")
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  historyRecords TeamMemberHistory[]

  @@index([teamId], map: "idx_team_member_team")
  @@index([userId], map: "idx_team_member_user")
  @@unique([teamId, userId], map: "uq_team_member_user")
  @@map("team_member")
}

model TeamMemberHistory {
  id           String              @id @default(uuid())
  teamMemberId String
  eventType    MembershipEventType @default(ADDED)
  actorId      String?
  description  String?             @db.Text
  occurredAt   DateTime            @default(now())
  createdAt    DateTime            @default(now())

  teamMember TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  actor      User?      @relation("TeamMemberHistoryActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([teamMemberId], map: "idx_team_member_history_parent")
  @@index([actorId], map: "idx_team_member_history_actor")
  @@map("team_member_history")
}

model Ticket {
  id          String       @id @default(uuid())
  guildId     String
  userId      String
  title       String
  description String       @default("No description provided") @db.Text
  status      TicketStatus @default(OPEN)
  messages    Json         @default("[]")
  tenantId    String?
  assignedToId String?
  priority    PriorityLevel @default(MEDIUM)
  category    String?
  slaDueAt    DateTime?
  isArchived  Boolean       @default(false)
  deletedAt   DateTime?
  metadata    Json          @default("{}")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  assignedTo User?           @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  tenant     Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  responses  TicketResponse[]
  messageRecords TicketMessage[]
  metadataRecords TicketMetadata[]

  @@index([guildId])
  @@index([userId])
  @@index([tenantId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([isArchived])
  @@index([createdAt])
  @@index([tenantId, status], map: "idx_ticket_tenant_status")
  @@map("ticket")
}

model TicketMetadata {
  id       String   @id @default(uuid())
  ticketId String
  key      String
  value    Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId], map: "idx_ticket_metadata_ticket")
  @@unique([ticketId, key], map: "uq_ticket_metadata_key")
  @@map("ticket_metadata")
}

model TicketMessage {
  id         String   @id @default(uuid())
  ticketId   String
  messageId  String   @unique
  authorId   String
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author User?  @relation("TicketMessageAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@index([ticketId], map: "idx_ticket_message_ticket")
  @@index([authorId], map: "idx_ticket_message_author")
  @@map("ticket_message")
}

model TicketResponse {
  id        String   @id @default(uuid())
  ticketId  String
  userId    String
  response  String   @db.Text
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  metadataRecords TicketResponseMetadata[]

  @@index([ticketId])
  @@index([userId])
  @@index([createdAt])
  @@map("ticket_response")
}

model TicketResponseMetadata {
  id              String   @id @default(uuid())
  ticketResponseId String
  key             String
  value           Json     @default("null")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ticketResponse TicketResponse @relation(fields: [ticketResponseId], references: [id], onDelete: Cascade)

  @@index([ticketResponseId], map: "idx_ticket_response_metadata_parent")
  @@unique([ticketResponseId, key], map: "uq_ticket_response_metadata_key")
  @@map("ticket_response_metadata")
}

model Timeout {
  id        String   @id @default(uuid())
  userId    String
  username  String
  guildId   String
  reason    String
  duration  Int
  timeoutAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guildId])
  @@map("timeout")
}

model TriviaAnswer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  answer     String
  correct    Boolean
  tenantId   String?
  responseTimeMs Int?
  source     String?
  metadata   Json     @default("{}")
  answeredAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question TriviaQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tenant   Tenant?        @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([questionId])
  @@index([tenantId], map: "idx_trivia_answer_tenant")
  @@index([correct], map: "idx_trivia_answer_correct")
  @@map("trivia_answer")
}

model TriviaQuestion {
  id            String   @id @default(uuid())
  question      String   @db.Text
  options       Json     @default("[]")
  correctAnswer String
  category      String
  tenantId      String?
  subcategory   String?
  difficulty    TriviaDifficulty @default(MEDIUM)
  isArchived    Boolean          @default(false)
  metadata      Json             @default("{}")
  createdById   String?
  updatedById   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  answers TriviaAnswer[]
  optionRecords TriviaQuestionOption[]
  tenant  Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User? @relation("TriviaQuestionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User? @relation("TriviaQuestionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_trivia_question_tenant")
  @@index([difficulty], map: "idx_trivia_question_difficulty")
  @@index([isArchived], map: "idx_trivia_question_archived")
  @@index([category], map: "idx_trivia_question_category")
  @@map("trivia_question")
}

model TriviaQuestionOption {
  id          String   @id @default(uuid())
  questionId  String
  value       String
  isCorrect   Boolean  @default(false)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  question TriviaQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId], map: "idx_trivia_option_question")
  @@unique([questionId, value], map: "uq_trivia_option_value")
  @@map("trivia_question_option")
}

model TriviaStats {
  id               String   @id @default(uuid())
  userId           String   @unique
  correctAnswers   Int      @default(0)
  incorrectAnswers Int      @default(0)
  totalQuestions   Int      @default(0)
  tenantId         String?
  currentStreak    Int      @default(0)
  bestStreak       Int      @default(0)
  bestScore        Int      @default(0)
  lastPlayedAt     DateTime?
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([tenantId], map: "idx_trivia_stats_tenant")
  
  @@map("trivia_stats")
}

model User {
  id                       String    @id @default(uuid())
  profilePicture           String?
  fullname                 String
  username                 String    @unique
  email                    String    @unique
  password                 String?
  role                     UserRole  @default(USER)
  bio                      String    @default("") @db.Text
  recentActivity           DateTime  @default(now())
  lastLoginAt              DateTime?
  inactiveSince            DateTime?
  verificationToken        String    @default("")
  verificationTokenExpires DateTime?
  isVerified               Boolean   @default(false)
  isAuthenticated          Boolean   @default(false)
  accessToken              String?
  refreshToken             String?
  apiKeyId                 String?   @map("api_key")
  betaKeyId                String?   @map("beta_key")
  isBetaTester             Boolean   @default(false)
  termsAccepted            Boolean   @default(false)
  termsAcceptedAt          DateTime?
  tenantId                 String?
  passwordChangedAt        DateTime?
  loginAttempts            Int       @default(0)
  mfaEnabled               Boolean   @default(false)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  addressRecord        UserAddress?
  phoneNumberRecords   UserPhoneNumber[]
  paymentMethodRecords UserPaymentMethod[]
  sessionRecords       UserSession[]
  socialLinkRecords    UserSocialLink[]
  oauthProviderRecords UserOAuthProvider[]
  postRecords          UserPost[]
  portfolioProjects    UserPortfolioProject[]
  followerRelations    UserFriend[]        @relation("UserFollowerRelations")
  followingRelations   UserFriend[]        @relation("UserFollowingRelations")
  organizationMemberships OrganizationMember[]
  teamMemberships         TeamMember[]
  groupMemberships        GroupMember[]
  projectMemberships      ProjectMember[]
  chatParticipantRecords  ChatParticipant[] @relation("ChatParticipantUser")
  ticketMessages          TicketMessage[] @relation("TicketMessageAuthor")
  gameRatings             GameRating[] @relation("GameRatingUser")
  versionContributions    VersionDeveloper[] @relation("VersionDeveloperUser")
  teamMemberHistoryEvents TeamMemberHistory[] @relation("TeamMemberHistoryActor")
  projectMemberHistoryEvents ProjectMemberHistory[] @relation("ProjectMemberHistoryActor")
  organizationMemberHistoryEvents OrganizationMemberHistory[] @relation("OrganizationMemberHistoryActor")
  groupMemberHistoryEvents GroupMemberHistory[] @relation("GroupMemberHistoryActor")

  apiKeys           ApiKey[]           @relation("UserApiKeys")
  betaKeys          BetaKey[]          @relation("UserBetaKeys")
  primaryApiKey     ApiKey?            @relation("UserPrimaryApiKey", fields: [apiKeyId], references: [id], onDelete: SetNull)
  primaryBetaKey    BetaKey?           @relation("UserPrimaryBetaKey", fields: [betaKeyId], references: [id], onDelete: SetNull)
  balance           Balance?
  developerPrograms DeveloperProgram[]
  favorites         Favorite[]
  likes             Like[]
  dislikes          Dislike[]
  shares            Share[]
  comments          Comment[]
  payments          Payment[]
  billingProfiles   BillingProfile[]
  subscriptions     Subscription[]
  generatedFinancialReports FinancialReport[] @relation("FinancialReportGeneratedBy")
  analyticsSessions AnalyticsSession[]
  analyticsEvents   AnalyticsEvent[]
  tasksAssigned     Task[]             @relation("TaskAssignee")
  tenant            Tenant?            @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  auditLogs         AuditLog[]         @relation("UserAuditLogs")
  teamsOwned        Team[]             @relation("TeamOwner")

  @@index([email], map: "idx_user_email")
  @@index([tenantId])
  @@index([role])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@map("user")
}

model UserAddress {
  id          String   @id @default(uuid())
  userId      String   @unique
  street      String   @default("")
  houseNumber String   @default("")
  state       String   @default("")
  postcode    String   @default("")
  country     String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_address")
}

model UserPhoneNumber {
  id        String           @id @default(uuid())
  userId    String
  type      PhoneNumberType
  number    String           @default("")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_phone_user")
  @@unique([userId, type], map: "uq_user_phone_type")
  @@map("user_phone_number")
}

model UserPaymentMethod {
  id        String        @id @default(uuid())
  userId    String
  method    PaymentMethod
  metadata  Json          @default("{}")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_payment_user")
  @@unique([userId, method], map: "uq_user_payment_method")
  @@map("user_payment_method")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  browser   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_session_user")
  @@map("user_session")
}

model UserSocialLink {
  id        String         @id @default(uuid())
  userId    String
  type      SocialLinkType
  url       String         @default("")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_social_user")
  @@unique([userId, type], map: "uq_user_social_type")
  @@map("user_social_link")
}

model UserOAuthProvider {
  id              String        @id @default(uuid())
  userId          String
  provider        OAuthProvider
  providerUserId  String        @default("")
  accessToken     String        @default("")
  refreshToken    String        @default("")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_oauth_user")
  @@unique([userId, provider], map: "uq_user_oauth_provider")
  @@map("user_o_auth_provider")
}

model UserPost {
  id          String   @id @default(uuid())
  userId      String
  picture     String   @default("")
  title       String
  description String   @db.Text
  author      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags UserPostTag[]

  @@index([userId], map: "idx_user_post_user")
  @@index([createdAt], map: "idx_user_post_created")
  @@map("user_post")
}

model UserPostTag {
  id      String   @id @default(uuid())
  postId  String
  value   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post UserPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId], map: "idx_user_post_tag_post")
  @@unique([postId, value], map: "uq_user_post_tag_value")
  @@map("user_post_tag")
}

model UserPortfolioProject {
  id                 String   @id @default(uuid())
  userId             String
  picture            String   @default("")
  title              String
  shortDescription   String
  description        String   @db.Text
  developer          String
  publishedAt        DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  features UserPortfolioProjectFeature[]
  services UserPortfolioProjectService[]
  supportedPlatforms UserPortfolioProjectPlatform[]
  versions UserPortfolioProjectVersion[]

  @@index([userId], map: "idx_user_portfolio_user")
  @@map("user_portfolio_project")
}

model UserPortfolioProjectFeature {
  id         String   @id @default(uuid())
  projectId  String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project UserPortfolioProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "idx_user_portfolio_feature_project")
  @@unique([projectId, value], map: "uq_user_portfolio_feature")
  @@map("user_portfolio_project_feature")
}

model UserPortfolioProjectService {
  id         String   @id @default(uuid())
  projectId  String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project UserPortfolioProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "idx_user_portfolio_service_project")
  @@unique([projectId, value], map: "uq_user_portfolio_service")
  @@map("user_portfolio_project_service")
}

model UserPortfolioProjectPlatform {
  id         String   @id @default(uuid())
  projectId  String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project UserPortfolioProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "idx_user_portfolio_platform_project")
  @@unique([projectId, value], map: "uq_user_portfolio_platform")
  @@map("user_portfolio_project_platform")
}

model UserPortfolioProjectVersion {
  id         String   @id @default(uuid())
  projectId  String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project UserPortfolioProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "idx_user_portfolio_version_project")
  @@unique([projectId, value], map: "uq_user_portfolio_version")
  @@map("user_portfolio_project_version")
}

model UserFriend {
  id          String   @id @default(uuid())
  followerId  String
  followedId  String
  followedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower User @relation("UserFollowerRelations", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("UserFollowingRelations", fields: [followedId], references: [id], onDelete: Cascade)

  @@index([followerId], map: "idx_user_friend_follower")
  @@index([followedId], map: "idx_user_friend_followed")
  @@unique([followerId, followedId], map: "uq_user_friend_pair")
  @@map("user_friend")
}

model Version {
  id                String   @id @default(uuid())
  picture           String   @default("")
  title             String
  shortDescription  String
  detailDescription String   @db.Text
  versionTagId      String
  features          Json     @default("[]")
  added             Json     @default("[]")
  fixed             Json     @default("[]")
  bugs              Json     @default("[]")
  developers        Json     @default("[]")
  githublink        String   @default("")
  downloadLink      String
  releasedAt        DateTime
  tenantId          String?
  isArchived        Boolean  @default(false)
  deletedAt         DateTime?
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  versionTag VersionTag @relation(fields: [versionTagId], references: [id], onDelete: Cascade)
  tenant     Tenant?    @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  featureRecords   VersionFeature[]
  additionRecords  VersionAddition[]
  fixRecords       VersionFix[]
  bugRecords       VersionBugRecord[]
  developerRecords VersionDeveloper[]
  metadataRecords  VersionMetadata[]

  @@index([versionTagId])
  @@index([tenantId])
  @@index([releasedAt])
  @@index([createdAt])
  @@index([isArchived])
  @@unique([tenantId, title, versionTagId], map: "uq_version_tenant_title_tag")
  @@map("version")
}

model VersionFeature {
  id        String   @id @default(uuid())
  versionId String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId], map: "idx_version_feature_version")
  @@unique([versionId, value], map: "uq_version_feature_value")
  @@map("version_feature")
}

model VersionAddition {
  id        String   @id @default(uuid())
  versionId String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId], map: "idx_version_addition_version")
  @@unique([versionId, value], map: "uq_version_addition_value")
  @@map("version_addition")
}

model VersionFix {
  id        String   @id @default(uuid())
  versionId String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId], map: "idx_version_fix_version")
  @@unique([versionId, value], map: "uq_version_fix_value")
  @@map("version_fix")
}

model VersionBugRecord {
  id        String   @id @default(uuid())
  versionId String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId], map: "idx_version_bug_version")
  @@unique([versionId, value], map: "uq_version_bug_value")
  @@map("version_bug_record")
}

model VersionDeveloper {
  id        String   @id @default(uuid())
  versionId String
  userId    String?
  name      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)
  user    User?    @relation("VersionDeveloperUser", fields: [userId], references: [id], onDelete: SetNull)

  @@index([versionId], map: "idx_version_developer_version")
  @@index([userId], map: "idx_version_developer_user")
  @@unique([versionId, name], map: "uq_version_developer_name")
  @@map("version_developer")
}

model VersionMetadata {
  id        String   @id @default(uuid())
  versionId String
  key       String
  value     Json     @default("null")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId], map: "idx_version_metadata_version")
  @@unique([versionId, key], map: "uq_version_metadata_key")
  @@map("version_metadata")
}

model VersionTag {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  tenantId    String?
  isArchived  Boolean  @default(false)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant   Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  versions Version[]
  metadataRecords VersionTagMetadata[]

  @@index([tenantId])
  @@index([isArchived])
  @@unique([tenantId, title], map: "uq_version_tag_tenant_title")
  @@map("version_tag")
}

model VersionTagMetadata {
  id          String   @id @default(uuid())
  versionTagId String
  key         String
  value       Json     @default("null")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  versionTag VersionTag @relation(fields: [versionTagId], references: [id], onDelete: Cascade)

  @@index([versionTagId], map: "idx_version_tag_metadata_parent")
  @@unique([versionTagId, key], map: "uq_version_tag_metadata_key")
  @@map("version_tag_metadata")
}

model Warn {
  id          String   @id @default(uuid())
  guildId     String
  userId      String
  moderatorId String
  reason      String   @db.Text
  tenantId    String?
  appealStatus ModerationAppealStatus @default(NONE)
  expiresAt   DateTime?
  resolvedAt  DateTime?
  metadata    Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  moderator User?   @relation("WarnModerator", fields: [moderatorId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("WarnCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("WarnUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([guildId])
  @@index([tenantId], map: "idx_warn_tenant")
  @@index([appealStatus], map: "idx_warn_appeal_status")
  @@index([moderatorId], map: "idx_warn_moderator")
  @@map("warn")
}

model Word {
  id        String   @id @default(uuid())
  guildId   String
  tenantId  String?
  word      String
  severity  PriorityLevel @default(MEDIUM)
  reason    String?  @db.Text
  isActive  Boolean  @default(true)
  metadata  Json     @default("{}")
  createdById String?
  updatedById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdBy User?   @relation("WordCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User?   @relation("WordUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([tenantId, word], map: "uq_word_tenant_word")
  @@index([guildId])
  @@index([tenantId], map: "idx_word_tenant")
  @@index([isActive], map: "idx_word_active")
  @@index([severity], map: "idx_word_severity")
  @@map("word")
}
